var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.54,1,2.09]],["body/injectables/AccessTokenGuard.html",[0,0.815,1,2.429,2,1.01,3,0.172,4,0.152,5,0.152,6,2.867,7,1.802,8,1.949,9,3.41,10,0.377,11,1.25,12,2.151,13,3.72,14,3.72,15,3.786,16,0.582,17,2.862,18,0.956,19,0.021,20,0.811,21,0.459,22,0.769,23,1.802,24,0.857,25,2.738,26,0.442,27,2.867,28,0.459,29,2.334,30,1.548,31,2.066,32,1.802,33,0.296,34,0.014,35,1.548,36,1.274,37,2.11,38,1.651,39,2.319,40,2.667,41,3.385,42,2.628,43,1.965,44,2.491,45,2.066,46,3.786,47,1.802,48,2.411,49,2.17,50,2.271,51,2.17,52,1.802,53,1.665,54,1.558,55,1.965,56,1.965,57,2.17,58,3.166,59,3.166,60,2.17,61,1.965,62,2.17,63,3.738,64,2.17,65,1.558,66,3.166,67,2.17,68,1.665,69,2.17,70,0.012,71,0.012]],["title/modules/AppConfigModule.html",[72,1.199,73,2.261]],["body/modules/AppConfigModule.html",[3,0.234,4,0.207,5,0.207,19,0.021,26,0.521,28,0.623,33,0.234,34,0.011,70,0.015,71,0.015,72,1.727,73,3.254,74,1.73,75,3.888,76,3.888,77,3.321,78,2.262,79,1.629,80,2.103,81,3.888,82,3.888,83,3.888,84,3.888,85,6.191,86,3.321,87,3.888,88,7.292,89,3.888,90,3.888,91,3.888,92,3.888,93,2.948,94,3.888,95,3.888,96,3.888,97,2.948,98,3.888,99,3.321,100,3.888,101,2.67,102,3.888,103,3.888,104,3.888,105,2.67,106,3.888,107,3.888,108,3.888,109,3.888,110,3.888,111,3.888,112,3.888]],["title/controllers/AppController.html",[113,1.943,114,2.466]],["body/controllers/AppController.html",[3,0.281,4,0.249,5,0.249,10,0.616,11,1.744,16,0.952,19,0.021,24,1.401,26,0.523,28,0.75,33,0.281,34,0.013,38,1.85,65,1.479,70,0.017,71,0.017,113,3.151,114,4,115,2.531,116,3.997,117,5.671,118,2.082,119,4.679,120,1.652,121,3.69,122,3.997,123,2.945,124,4.679]],["title/modules/AppModule.html",[72,1.199,125,2.466]],["body/modules/AppModule.html",[3,0.206,4,0.183,5,0.183,19,0.021,26,0.608,28,0.551,33,0.206,34,0.01,70,0.014,71,0.014,72,1.82,73,4.021,74,1.529,80,2.572,114,3.743,115,2.572,121,3.717,122,2.934,125,4.915,126,1.858,127,2.162,128,2.162,129,1.858,130,3.431,131,2.162,132,2.934,133,2.934,134,2.934,135,4.021,136,3.717,137,3.717,138,3.717,139,2.992,140,2.162,141,2.162,142,3.435,143,4.061,144,3.435,145,3.435,146,3.435,147,2.934,148,2.766,149,2.934,150,2.934,151,2.934]],["title/injectables/AppService.html",[0,0.54,121,2.09]],["body/injectables/AppService.html",[0,0.902,2,1.729,3,0.294,4,0.26,5,0.26,10,0.645,11,1.794,16,0.996,19,0.021,24,1.466,26,0.44,28,0.785,33,0.294,34,0.014,65,1.549,70,0.017,71,0.017,117,5.762,120,1.699,121,3.486,152,4.184,153,4.898,154,4.898,155,4.898]],["title/classes/Auth.html",[34,0.01,156,2.261]],["body/classes/Auth.html",[3,0.329,4,0.291,5,0.291,19,0.019,33,0.329,34,0.015,70,0.018,71,0.018,156,4.034,157,2.167,158,4.683]],["title/controllers/AuthController.html",[113,1.943,159,2.466]],["body/controllers/AuthController.html",[3,0.073,4,0.064,5,0.064,10,0.159,11,0.625,12,2.506,16,1.11,18,1.73,19,0.022,20,1.51,21,0.83,22,1.391,24,1.633,26,0.45,28,0.194,29,1.307,30,0.654,33,0.073,34,0.003,38,0.478,39,2.037,40,2.359,42,2.559,46,3.352,47,1.737,48,1.653,50,2.023,53,0.703,54,1.039,65,1.725,68,0.703,70,0.006,71,0.006,113,0.654,115,0.654,118,2.428,120,1.824,123,0.76,156,0.76,159,1.435,160,1.032,161,1.032,162,2.093,163,2.089,164,2.089,165,1.785,166,3.288,167,2.089,168,2.089,169,3.288,170,2.089,171,2.089,172,2.76,173,2.089,174,2.089,175,1.208,176,3.166,177,2.089,178,2.089,179,1.208,180,1.827,181,4.038,182,1.208,183,1.208,184,2.809,185,1.208,186,1.208,187,1.208,188,2.809,189,1.208,190,1.032,191,1.208,192,1.208,193,2.817,194,1.785,195,1.737,196,1.208,197,1.208,198,1.208,199,1.208,200,1.208,201,2.744,202,1.208,203,1.208,204,1.208,205,1.208,206,1.208,207,1.208,208,1.208,209,1.208,210,1.208,211,1.208,212,1.208,213,2.559,214,1.208,215,1.208,216,1.208,217,3.288,218,1.208,219,2.089,220,1.208,221,1.208,222,1.208,223,2.089,224,1.208,225,1.785,226,1.208,227,1.208,228,1.208,229,1.785,230,1.208,231,0.916,232,1.208,233,1.032,234,1.032,235,1.785,236,4.76,237,2.089,238,0.916,239,0.506,240,1.208,241,0.916,242,0.83,243,1.208,244,1.785,245,1.208,246,0.83,247,1.208,248,2.089,249,1.208,250,1.032,251,1.208,252,1.208,253,0.83,254,1.208,255,1.208,256,1.208,257,1.208,258,2.089,259,4.66,260,1.208,261,3.288,262,2.089,263,1.435,264,1.208,265,1.208,266,1.208,267,1.208,268,1.208,269,2.089,270,1.208,271,1.208,272,1.208,273,1.785,274,1.208,275,1.208,276,1.208,277,1.435,278,1.208,279,1.208,280,1.208,281,1.208,282,1.208,283,2.089,284,2.089,285,1.208,286,1.208,287,2.089,288,1.208,289,2.089,290,1.208,291,1.208,292,1.557,293,1.208,294,1.208,295,1.208,296,1.208,297,1.208,298,1.208,299,1.208,300,1.208,301,1.208,302,1.208,303,1.208,304,1.032,305,1.208]],["title/modules/AuthModule.html",[72,1.199,148,2.09]],["body/modules/AuthModule.html",[3,0.19,4,0.168,5,0.168,19,0.021,26,0.613,28,0.508,29,3.264,30,1.715,33,0.19,34,0.009,70,0.013,71,0.013,72,1.743,74,1.411,78,2.614,79,1.328,80,2.431,115,2.431,126,1.715,127,1.995,128,1.995,129,1.715,130,3.286,131,3.286,136,3.623,137,3.623,138,2.614,139,2.828,140,1.995,141,1.995,143,3.839,147,2.708,148,4.139,150,2.708,151,2.708,159,3.584,306,2.708,307,3.17,308,2.708,309,2.708,310,3.919,311,3.919,312,3.919,313,3.17,314,3.17,315,3.17,316,5.22,317,3.17,318,2.708,319,3.17,320,3.17,321,3.17]],["title/classes/BaseAPIDocument.html",[34,0.01,322,2.724]],["body/classes/BaseAPIDocument.html",[3,0.266,4,0.235,5,0.235,10,0.583,11,1.684,16,1.144,19,0.021,24,1.325,26,0.397,33,0.266,34,0.012,45,2.358,65,1.399,70,0.016,71,0.016,157,1.75,239,1.855,322,4.266,323,3.782,324,1.986,325,5.206,326,6.183,327,6.506,328,2.786,329,2.575,330,6.183,331,4.426,332,4.426,333,4.426,334,4.426,335,4.426,336,5.625,337,4.426,338,4.426,339,4.426,340,4.426]],["title/classes/BaseEntity.html",[34,0.01,341,2.466]],["body/classes/BaseEntity.html",[3,0.241,4,0.213,5,0.213,10,0.528,16,1.275,19,0.021,21,1.005,26,0.36,33,0.241,34,0.011,70,0.015,71,0.015,118,2.789,120,1.496,157,1.585,324,1.863,325,5.432,341,3.623,342,3.426,343,5.898,344,5.898,345,5.039,346,5.898,347,5.07,348,5.898,349,4.01,350,5.898,351,4.01,352,5.277,353,4.01,354,5.898,355,4.01,356,4.01,357,2.753,358,4.01]],["title/guards/BasicTokenGuard.html",[242,2.466,359,2.724]],["body/guards/BasicTokenGuard.html",[0,0.748,3,0.22,4,0.195,5,0.195,7,2.307,10,0.483,11,1.488,12,2.105,13,4.151,14,3.412,15,3.805,16,1.011,18,1.66,19,0.021,20,1.409,21,0.797,22,1.334,23,2.307,24,1.097,25,2.511,26,0.446,27,3.412,28,0.587,29,3.085,30,1.983,33,0.22,34,0.01,35,1.983,36,1.631,38,1.449,39,2.359,40,1.983,41,2.516,42,3.128,43,2.516,44,1.852,45,1.536,46,2.307,47,2.307,48,1.631,50,1.536,54,1.571,61,2.516,65,1.159,70,0.014,71,0.014,123,2.307,180,2.083,242,3.412,263,2.516,273,3.131,292,2.083,360,2.779,361,4.816,362,2.779,363,3.665,364,3.665,365,3.665]],["title/guards/BearerTokenGuard.html",[9,2.261,359,2.724]],["body/guards/BearerTokenGuard.html",[0,0.801,1,1.605,3,0.166,4,0.147,5,0.147,6,3.314,7,1.737,8,1.607,9,3.351,10,0.364,11,1.217,12,2.119,13,3.656,14,3.656,15,3.737,16,0.827,18,1.357,19,0.021,20,1.152,21,0.652,22,1.091,23,1.737,24,0.826,25,2.69,26,0.433,27,2.791,28,0.442,29,2.812,30,1.493,31,2.573,32,1.737,33,0.29,34,0.014,35,1.493,36,1.809,37,2.054,38,1.607,39,2.292,40,2.611,41,3.314,42,2.558,43,1.895,44,2.438,45,2.022,46,3.737,47,1.737,48,2.369,49,2.092,50,2.231,51,2.092,52,1.737,53,1.605,54,1.526,55,1.895,56,1.895,57,2.092,58,3.082,59,3.082,60,2.092,61,1.895,62,2.092,63,3.659,64,2.092,65,1.526,66,3.082,67,2.092,68,1.605,69,2.092,70,0.012,71,0.012,360,2.092,362,2.092,366,2.759,367,2.759]],["title/classes/ChangePasswordDto.html",[34,0.01,176,2.466]],["body/classes/ChangePasswordDto.html",[3,0.264,4,0.233,5,0.233,10,0.579,16,1.253,19,0.021,21,0.988,26,0.394,33,0.264,34,0.012,70,0.016,71,0.016,118,2.742,120,1.943,157,1.737,162,4.673,176,3.844,239,1.841,292,2.582,324,1.976,368,5.543,369,3.753,370,5.264,371,4.051,372,4.393,373,4.393,374,4.393]],["title/classes/CreateAuthDto.html",[34,0.01,375,2.466]],["body/classes/CreateAuthDto.html",[3,0.328,4,0.29,5,0.29,19,0.019,33,0.328,34,0.015,70,0.018,71,0.018,157,2.157,375,4.389,376,4.661,377,4.137]],["title/classes/CreateSocialUserDto.html",[34,0.01,378,2.466]],["body/classes/CreateSocialUserDto.html",[3,0.211,4,0.186,5,0.186,10,0.462,16,1.266,19,0.021,20,1.563,21,0.997,22,1.727,26,0.495,33,0.211,34,0.014,70,0.014,71,0.014,118,2.769,120,1.902,157,1.387,180,2.31,239,1.47,292,2.31,324,1.703,328,2.208,329,2.041,371,3.832,378,3.312,379,4.876,380,4.876,381,2.208,382,3.207,383,3.207,384,3.508,385,3.508,386,3.508,387,3.508,388,3.508,389,3.508,390,3.508,391,2.785,392,3.312,393,3.508,394,3.508,395,4.823,396,4.823,397,5.935,398,3.508,399,2.997,400,2.66,401,3.508]],["title/classes/CreateUserDto.html",[34,0.01,213,2.261]],["body/classes/CreateUserDto.html",[3,0.203,4,0.18,5,0.18,10,0.446,16,1.294,19,0.021,20,1.533,21,1.019,22,1.263,26,0.485,33,0.203,34,0.01,70,0.013,71,0.013,118,2.83,120,1.939,157,1.338,180,2.267,213,2.961,239,1.418,292,2.267,324,1.661,328,2.13,329,1.969,371,4.086,379,4.946,381,2.13,383,3.146,391,2.733,392,3.231,400,2.566,402,3.714,403,4.101,404,2.566,405,3.384,406,3.384,407,3.384,408,3.384,409,3.384,410,2.324,411,3.384]],["title/modules/DatabaseModule.html",[72,1.199,135,2.261]],["body/modules/DatabaseModule.html",[3,0.263,4,0.233,5,0.233,19,0.021,21,0.701,26,0.552,28,0.701,33,0.263,34,0.012,48,2.485,70,0.016,71,0.016,72,1.865,74,1.948,78,3.249,79,1.834,80,3.021,86,3.738,135,3.515,292,1.834,412,4.376,413,3.738,414,3.005,415,3.505,416,4.376,417,3.319,418,3.319,419,3.319,420,4.376,421,3.738,422,4.376,423,4.376,424,4.376,425,4.376,426,4.376,427,4.376,428,3.319,429,4.376,430,4.376,431,4.376,432,4.376]],["title/modules/EmailModule.html",[72,1.199,136,2.09]],["body/modules/EmailModule.html",[3,0.261,4,0.231,5,0.231,19,0.021,26,0.55,28,0.696,33,0.261,34,0.012,70,0.016,71,0.016,72,2.047,74,1.933,78,3.233,79,1.82,80,2.35,126,2.35,127,2.734,128,2.734,129,2.35,130,3.858,131,3.858,136,4.04,139,3.498,140,2.734,141,2.734,433,3.71,434,3.71,435,3.71,436,4.561,437,4.343,438,4.343]],["title/injectables/EmailService.html",[0,0.54,436,2.261]],["body/injectables/EmailService.html",[0,0.773,2,1.359,3,0.231,4,0.205,5,0.205,10,0.507,11,1.537,16,1.176,18,1.715,19,0.021,20,1.456,21,0.926,22,1.379,24,1.152,26,0.553,28,0.617,33,0.231,34,0.011,36,1.713,37,2.92,38,1.522,54,1.217,65,1.217,70,0.015,71,0.015,79,1.613,123,2.423,156,2.423,324,1.813,415,3.575,436,3.233,439,3.288,440,5.779,441,5.135,442,2.919,443,5.135,444,5.135,445,5.779,446,3.849,447,3.849,448,5.779,449,3.849,450,5.135,451,3.288,452,3.849,453,3.849,454,3.849,455,3.849,456,3.849,457,3.849,458,3.849]],["title/injectables/GoogleUserGuard.html",[0,0.54,246,2.466]],["body/injectables/GoogleUserGuard.html",[0,0.911,2,1.759,3,0.299,4,0.265,5,0.265,8,2.394,19,0.021,26,0.585,28,0.799,33,0.299,34,0.014,70,0.017,71,0.017,246,4.158,391,2.518,459,4.257,460,3.422,461,6.055,462,3.779,463,2.696,464,3.779]],["title/injectables/GoogleUserStrategy.html",[0,0.54,310,2.261]],["body/injectables/GoogleUserStrategy.html",[0,0.643,2,1.044,3,0.178,4,0.157,5,0.157,8,1.69,10,0.39,11,1.28,12,1.875,16,0.87,18,1.428,19,0.021,20,1.424,21,0.685,22,1.148,24,0.885,25,2.161,26,0.524,28,0.474,31,2.629,32,1.862,33,0.178,34,0.008,36,1.903,37,2.161,38,1.169,39,1.875,44,1.495,45,1.24,50,1.792,54,1.352,70,0.012,71,0.012,79,1.24,101,2.031,120,1.725,180,2.105,231,2.243,277,2.936,310,2.692,382,1.721,383,3.201,415,3.291,442,2.243,463,1.6,465,4.29,466,2.031,467,3.243,468,3.809,469,2.243,470,2.958,471,5.022,472,5.197,473,4.29,474,5.502,475,2.527,476,4.276,477,2.243,478,2.243,479,2.243,480,2.031,481,2.527,482,2.243,483,2.527,484,2.958,485,2.527,486,2.958,487,2.527,488,2.958,489,2.958,490,4.29,491,3.653,492,4.276,493,2.243,494,2.527,495,2.527,496,2.527,497,2.958,498,2.958,499,2.031,500,2.243,501,2.958,502,2.958,503,2.527]],["title/classes/HttpExceptionFilter.html",[34,0.01,504,2.724]],["body/classes/HttpExceptionFilter.html",[3,0.216,4,0.191,5,0.191,10,0.474,11,1.469,16,0.732,18,1.201,19,0.021,20,1.02,21,0.576,22,0.966,24,1.077,26,0.44,28,0.576,33,0.216,34,0.01,35,2.654,39,2.344,45,2.056,52,3.088,70,0.014,71,0.014,120,1.78,157,1.422,419,4.234,477,2.727,499,3.834,504,3.72,505,4.191,506,3.072,507,5.583,508,4.905,509,5.997,510,3.596,511,3.596,512,3.72,513,2.469,514,3.596,515,3.596,516,3.596,517,3.596,518,3.596,519,4.77,520,3.596,521,5.997,522,3.596,523,4.234,524,2.727,525,4.77,526,3.072,527,4.905,528,4.905,529,4.905,530,4.191,531,4.905,532,3.596]],["title/injectables/LocalUserGuard.html",[0,0.54,533,2.724]],["body/injectables/LocalUserGuard.html",[0,0.911,2,1.759,3,0.299,4,0.265,5,0.265,8,2.394,19,0.021,26,0.585,28,0.799,33,0.299,34,0.014,70,0.017,71,0.017,391,2.518,460,3.422,462,3.779,463,2.696,464,3.779,533,4.592,534,4.257,535,6.055]],["title/injectables/LocalUserStrategy.html",[0,0.54,311,2.261]],["body/injectables/LocalUserStrategy.html",[0,0.748,2,1.294,3,0.22,4,0.195,5,0.195,8,1.964,10,0.483,11,1.488,12,2.105,16,1.011,18,1.66,19,0.021,20,1.409,21,0.797,22,1.334,24,1.097,25,2.511,26,0.567,28,0.587,29,3.085,30,1.983,33,0.22,34,0.01,36,1.631,38,1.449,50,1.536,54,1.159,65,1.159,70,0.014,71,0.014,120,1.847,123,2.307,180,2.533,292,2.533,304,3.131,311,3.128,362,2.779,463,1.983,466,2.516,467,3.768,468,3.768,469,2.779,478,2.779,479,2.779,480,2.516,482,2.779,536,4.816,537,4.969,538,3.665,539,2.779,540,3.131,541,3.665]],["title/classes/LoginUserDto.html",[34,0.01,542,2.724]],["body/classes/LoginUserDto.html",[3,0.279,4,0.247,5,0.247,10,0.611,16,1.179,19,0.021,21,0.929,26,0.417,33,0.279,34,0.013,70,0.017,71,0.017,118,2.579,120,1.877,157,1.835,180,2.649,239,1.945,292,2.649,324,2.046,371,3.963,381,2.921,404,3.519,542,4.395,543,5.399,544,3.965]],["title/injectables/NaverUserGuard.html",[0,0.54,253,2.466]],["body/injectables/NaverUserGuard.html",[0,0.911,2,1.759,3,0.299,4,0.265,5,0.265,8,2.394,19,0.021,26,0.585,28,0.799,33,0.299,34,0.014,70,0.017,71,0.017,253,4.158,391,2.518,460,3.422,462,3.779,463,2.696,464,3.779,545,4.257,546,6.055]],["title/injectables/NaverUserStrategy.html",[0,0.54,312,2.261]],["body/injectables/NaverUserStrategy.html",[0,0.64,2,1.036,3,0.176,4,0.156,5,0.156,8,1.681,10,0.387,11,1.273,12,1.867,16,0.865,18,1.42,19,0.021,20,1.418,21,0.682,22,1.142,24,0.879,25,2.149,26,0.522,28,0.47,31,2.623,32,1.847,33,0.176,34,0.008,36,1.893,37,2.149,38,1.681,39,2.047,50,1.782,54,1.344,70,0.012,71,0.012,79,1.23,105,2.015,120,1.72,180,1.782,184,3.633,188,4.272,277,2.92,312,2.677,382,1.708,383,3.386,415,3.283,442,2.226,463,1.588,466,2.015,467,3.225,468,3.792,469,2.226,472,5.184,473,4.272,475,2.507,478,2.226,479,2.226,480,2.015,482,2.226,483,2.507,485,2.507,487,2.507,490,4.684,491,3.633,493,2.226,494,2.507,495,2.507,499,2.015,500,2.226,503,2.507,547,4.272,548,2.935,549,2.935,550,2.935,551,2.935,552,4.252,553,2.935]],["title/injectables/PasswordPipe.html",[0,0.54,410,2.466]],["body/injectables/PasswordPipe.html",[0,0.846,2,1.563,3,0.266,4,0.235,5,0.235,10,0.583,11,1.684,16,0.9,18,1.478,19,0.021,20,1.255,21,0.71,22,1.189,24,1.325,26,0.397,28,0.71,33,0.266,34,0.012,35,2.395,44,2.237,45,1.855,65,1.399,70,0.016,71,0.016,329,2.575,410,3.863,554,3.782,555,5.625,556,5.625,557,5.283,558,6.506,559,4.426,560,5.625,561,4.806,562,4.426,563,5.625,564,4.426]],["title/modules/RedisModule.html",[72,1.199,137,2.09]],["body/modules/RedisModule.html",[3,0.264,4,0.233,5,0.233,12,1.64,19,0.021,26,0.582,28,0.704,33,0.264,34,0.012,48,1.955,70,0.016,71,0.016,72,1.87,74,1.955,78,3.257,79,1.841,80,3.029,93,3.331,137,3.257,415,3.51,417,3.331,418,3.331,419,3.331,421,3.753,565,4.393,566,4.393,567,3.753,568,4.782,569,5.598,570,3.753,571,4.782,572,4.393,573,4.393,574,4.393,575,4.393,576,4.393,577,4.393]],["title/injectables/RefreshTokenGuard.html",[0,0.54,68,2.09]],["body/injectables/RefreshTokenGuard.html",[0,0.815,1,1.665,2,1.01,3,0.172,4,0.152,5,0.152,6,2.867,7,1.802,8,1.949,9,3.41,10,0.377,11,1.25,12,2.151,13,3.72,14,3.72,15,3.786,16,0.582,18,0.956,19,0.021,20,0.811,21,0.459,22,0.769,23,1.802,24,0.857,25,2.738,26,0.442,27,2.867,28,0.459,29,2.334,30,1.548,31,2.066,32,1.802,33,0.296,34,0.014,35,1.548,36,1.274,37,2.11,38,1.651,39,2.319,40,2.667,41,3.385,42,2.628,43,1.965,44,2.491,45,2.066,46,3.786,47,1.802,48,2.411,49,2.17,50,2.271,51,2.17,52,1.802,53,1.665,54,1.558,55,1.965,56,1.965,57,2.17,58,3.166,59,3.166,60,2.17,61,1.965,62,2.17,63,3.738,64,2.17,65,1.558,66,3.166,67,2.17,68,2.429,69,2.17,70,0.012,71,0.012,578,2.862]],["title/interfaces/RequestUser.html",[201,2.261,579,1.943]],["body/interfaces/RequestUser.html",[3,0.297,4,0.262,5,0.262,8,2.381,10,0.651,19,0.02,21,0.792,26,0.443,33,0.297,52,3.791,54,2.279,70,0.017,71,0.017,201,3.791,324,2.126,540,4.22,579,2.673,580,3.392,581,4.22,582,4.22]],["title/interfaces/TokenPayloadInterface.html",[579,1.943,583,2.724]],["body/interfaces/TokenPayloadInterface.html",[3,0.309,4,0.273,5,0.273,10,0.677,19,0.02,21,0.824,33,0.309,70,0.018,71,0.018,120,1.874,193,5.199,324,2.178,579,2.78,580,3.529,583,4.678,584,4.39,585,3.897]],["title/injectables/TransformInterceptor.html",[0,0.54,586,2.724]],["body/injectables/TransformInterceptor.html",[0,0.709,2,1.198,3,0.325,4,0.18,5,0.18,10,0.447,11,1.411,15,3.684,16,0.69,18,1.134,19,0.022,20,0.962,21,0.868,22,0.911,23,2.967,24,1.016,26,0.486,28,0.544,33,0.37,34,0.01,35,1.836,39,2.022,65,1.49,70,0.014,71,0.014,512,3.575,519,2.9,523,3.575,524,2.574,525,4.027,526,2.9,530,4.627,586,3.575,587,2.331,588,5.416,589,3.394,590,5.852,591,5.852,592,3.394,593,5.416,594,4.714,595,2.9,596,2.9,597,3.394,598,3.575,599,4.714,600,2.574,601,2.9,602,3.394,603,4.714,604,3.394,605,3.394,606,3.394,607,3.394,608,3.394,609,3.394,610,3.394,611,3.394]],["title/classes/UpdateAuthDto.html",[34,0.01,612,2.724]],["body/classes/UpdateAuthDto.html",[3,0.306,4,0.271,5,0.271,8,2.426,19,0.021,26,0.551,33,0.306,34,0.014,70,0.018,71,0.018,157,2.014,239,2.135,375,3.497,377,3.862,612,4.653,613,4.351,614,6.135,615,5.093,616,5.093,617,5.093]],["title/classes/UpdateUserDto.html",[34,0.01,618,2.466]],["body/classes/UpdateUserDto.html",[3,0.254,4,0.225,5,0.225,10,0.557,16,1.112,19,0.021,21,0.876,22,1.718,26,0.38,33,0.254,34,0.012,70,0.016,71,0.016,118,2.432,120,1.814,157,1.673,194,4.669,195,4.027,239,1.773,263,4.393,292,2.537,324,1.929,371,3.522,381,2.663,402,4.157,404,3.209,544,3.615,618,3.753,619,5.171,620,5.465]],["title/entities/User.html",[54,1.135,621,2.724]],["body/entities/User.html",[3,0.127,4,0.112,5,0.112,8,0.836,10,0.279,12,1.53,16,1.179,19,0.022,20,1.162,21,0.956,22,1.638,25,1.677,26,0.502,28,0.339,33,0.127,34,0.006,39,0.79,44,1.677,45,1.391,48,2.382,50,1.717,54,1.049,65,1.295,70,0.01,71,0.01,118,2.58,120,1.839,180,1.717,238,1.604,239,0.886,263,2.279,292,1.717,324,1.172,325,5.269,328,2.579,341,2.279,357,1.452,371,3.372,382,2.384,383,2.384,391,2.548,392,2.279,402,2.814,403,3.107,428,1.604,493,2.517,499,2.279,500,2.517,598,1.604,621,2.517,622,1.807,623,3.501,624,2.115,625,5.352,626,2.115,627,3.319,628,2.115,629,2.115,630,5.043,631,2.115,632,2.115,633,2.115,634,2.115,635,2.115,636,2.115,637,4.641,638,2.115,639,2.115,640,2.115,641,3.319,642,5.961,643,2.115,644,1.807,645,1.604,646,2.836,647,4.097,648,2.115,649,2.115,650,5.043,651,2.115,652,2.115,653,2.115,654,2.115,655,2.115,656,2.115,657,1.807,658,2.115,659,2.115,660,2.115,661,2.115,662,2.115,663,2.836,664,1.807,665,4.097,666,2.115,667,2.115,668,2.115,669,2.115]],["title/controllers/UserController.html",[113,1.943,670,2.466]],["body/controllers/UserController.html",[1,1.403,3,0.145,4,0.128,5,0.322,10,0.318,11,1.1,12,2.108,16,0.748,18,1.227,19,0.022,20,1.042,21,0.589,22,0.987,24,1.1,26,0.543,28,0.387,31,1.866,33,0.145,34,0.007,36,1.073,37,1.857,38,1.453,39,2.001,40,3.354,50,1.54,54,1.407,65,1.162,70,0.011,71,0.011,79,1.011,113,1.305,115,1.305,118,1.635,120,0.684,161,2.06,181,2.787,195,1.518,201,3.695,229,3.139,233,2.06,234,2.06,235,3.139,236,3.803,238,1.829,239,1.011,241,1.829,244,2.06,250,2.06,259,3.139,382,1.403,415,2.408,513,1.656,618,4.031,670,2.523,671,2.06,672,3.803,673,4.452,674,2.412,675,5.646,676,2.412,677,2.412,678,2.412,679,2.06,680,2.412,681,3.675,682,2.412,683,2.412,684,2.412,685,4.452,686,2.412,687,2.06,688,2.412,689,1.829,690,2.412,691,2.412,692,2.412,693,2.412,694,2.412,695,3.675,696,3.675,697,3.675,698,3.675,699,3.675,700,3.675,701,2.412,702,2.412,703,2.06,704,3.675,705,2.412,706,2.412,707,2.412,708,2.412,709,2.412,710,4.978,711,2.06,712,2.412,713,2.412,714,2.412,715,2.412]],["title/modules/UserModule.html",[72,1.199,138,2.09]],["body/modules/UserModule.html",[3,0.179,4,0.158,5,0.268,12,1.11,19,0.021,26,0.611,28,0.477,31,2.854,33,0.179,34,0.008,39,1.603,40,1.608,48,1.323,54,0.94,65,0.94,70,0.012,71,0.012,72,1.682,74,1.323,78,2.931,79,1.246,80,2.725,97,2.255,115,2.322,126,1.608,127,1.871,128,1.871,129,1.608,130,3.17,131,3.17,138,3.813,139,2.702,140,1.871,141,1.871,148,3.546,149,2.54,347,3.255,413,2.54,414,2.042,415,2.984,417,2.255,418,2.255,513,2.042,596,2.54,600,2.255,670,3.459,687,2.54,689,2.255,703,2.54,716,2.54,717,2.54,718,2.973,719,2.54,720,2.973,721,2.973,722,2.54,723,2.973,724,4.292,725,2.973,726,2.54,727,4.292,728,2.973,729,2.973,730,2.973,731,2.973,732,2.973,733,2.973,734,4.292,735,2.973,736,2.973,737,2.973,738,2.973,739,2.973,740,2.973,741,2.973,742,2.973,743,2.973,744,2.973,745,2.973,746,2.973,747,2.973,748,2.54,749,2.973,750,2.973]],["title/injectables/UserService.html",[0,0.54,31,1.505]],["body/injectables/UserService.html",[0,0.287,2,0.384,3,0.065,4,0.058,5,0.058,10,0.143,11,0.571,12,2.537,16,1.137,18,1.866,19,0.022,20,1.584,21,0.896,22,1.5,24,1.643,26,0.393,28,0.174,31,0.799,33,0.065,34,0.003,36,0.849,37,0.55,38,0.43,39,2.233,44,2.509,45,2.081,48,0.849,50,2.688,53,1.11,54,1.796,65,1.767,70,0.005,71,0.005,120,1.976,162,1.446,165,1.629,180,2.145,181,4.161,190,1.629,193,3.766,213,2.41,225,0.93,231,0.825,241,1.446,277,2.629,292,1.605,345,3.931,357,0.747,370,3.271,378,2.1,380,0.825,382,2.677,383,0.633,391,0.55,392,0.747,400,0.825,402,3.292,403,1.446,414,0.747,477,0.825,496,2.613,561,2.175,623,0.93,644,0.93,645,0.825,663,2.613,664,1.629,672,2.175,679,2.175,711,0.93,722,0.93,751,0.93,752,1.907,753,1.907,754,1.907,755,1.907,756,1.907,757,1.907,758,1.907,759,1.907,760,1.907,761,1.907,762,1.907,763,1.907,764,1.088,765,2.613,766,1.088,767,1.907,768,1.907,769,1.088,770,1.907,771,1.088,772,1.907,773,1.088,774,1.088,775,1.907,776,1.088,777,1.907,778,1.088,779,1.907,780,1.088,781,1.907,782,1.088,783,1.907,784,1.088,785,1.088,786,1.907,787,1.088,788,1.907,789,1.088,790,1.907,791,1.088,792,1.088,793,1.088,794,1.907,795,1.088,796,1.907,797,1.088,798,3.828,799,1.088,800,1.907,801,1.088,802,1.088,803,1.907,804,1.907,805,1.088,806,1.907,807,1.088,808,1.088,809,1.907,810,1.088,811,3.828,812,4.795,813,1.088,814,3.058,815,3.058,816,1.907,817,1.907,818,1.088,819,1.088,820,2.546,821,1.088,822,1.088,823,3.478,824,1.907,825,3.058,826,3.058,827,1.088,828,1.088,829,1.088,830,1.088,831,1.088]],["title/interfaces/VerifyPayloadInterface.html",[579,1.943,832,2.724]],["body/interfaces/VerifyPayloadInterface.html",[3,0.309,4,0.273,5,0.273,10,0.677,19,0.02,21,0.824,33,0.309,70,0.018,71,0.018,120,1.874,180,2.873,324,2.178,579,2.78,580,3.529,585,3.897,832,4.678,833,4.39]],["title/coverage.html",[834,3.717]],["body/coverage.html",[0,1.013,1,1.478,5,0.135,6,3.155,7,3.217,9,1.599,19,0.021,21,0.407,29,1.203,31,1.064,34,0.019,45,1.064,54,1.208,68,1.478,70,0.011,71,0.011,113,2.485,114,1.744,116,2.17,121,1.478,129,1.374,152,2.17,156,1.599,158,2.17,159,1.744,160,2.17,176,1.744,201,1.599,213,1.599,242,1.744,246,1.744,253,1.744,310,1.599,311,1.599,312,1.599,322,1.926,323,2.17,341,1.744,342,2.17,359,2.898,361,2.17,368,2.17,369,2.17,375,1.744,376,2.17,377,2.898,378,1.744,379,2.898,380,1.926,381,3.217,410,1.744,436,1.599,439,2.17,459,2.17,460,3.155,465,2.17,466,3.155,504,1.926,505,2.17,506,2.17,533,1.926,534,2.17,536,2.17,542,1.926,543,2.17,545,2.17,547,2.17,554,2.17,579,2.485,581,2.17,582,2.17,583,1.926,584,2.17,585,2.898,586,1.926,587,2.624,600,2.898,612,1.926,613,2.17,618,1.744,619,2.17,621,1.926,622,3.265,670,1.744,671,2.17,751,2.17,832,1.926,833,2.17,834,1.926,835,2.54,836,2.54,837,2.54,838,7.301,839,6.409,840,2.54,841,2.54,842,2.17,843,2.54,844,3.821,845,6.29,846,6.29,847,2.54,848,2.17,849,2.17,850,2.54,851,2.54,852,2.54,853,2.54,854,2.54,855,2.54]],["title/dependencies.html",[126,2.337,856,2.562]],["body/dependencies.html",[19,0.021,28,0.543,34,0.013,70,0.013,71,0.013,77,2.891,79,1.418,93,2.566,97,2.566,99,4.019,101,3.231,105,2.324,126,1.831,239,1.418,318,2.891,347,2.566,357,2.324,399,2.891,414,2.324,451,2.891,463,1.831,480,4.218,481,4.019,513,2.324,539,3.568,557,2.891,567,2.891,568,4.62,570,4.019,571,2.891,595,2.891,645,2.566,646,2.891,657,2.891,689,2.566,726,2.891,857,3.384,858,3.384,859,3.384,860,3.384,861,5.408,862,3.384,863,3.384,864,3.384,865,3.384,866,3.384,867,3.384,868,3.384,869,3.384,870,3.384,871,4.705,872,4.705,873,3.384,874,3.384,875,3.384,876,3.384,877,3.384,878,3.384,879,3.384,880,3.384,881,5.408,882,3.384,883,4.705,884,3.384,885,3.384,886,3.384,887,3.384,888,3.384,889,3.384,890,3.384,891,3.384,892,3.384,893,3.384,894,3.384,895,3.384,896,3.384,897,3.384,898,3.384,899,3.384,900,3.384,901,3.384,902,3.384,903,3.384,904,3.384,905,3.384]],["title/miscellaneous/enumerations.html",[906,1.745,907,3.69]],["body/miscellaneous/enumerations.html",[10,0.68,19,0.02,70,0.018,71,0.018,101,4.247,105,4.247,329,3.995,391,3.125,539,4.69,906,3.003,907,4.41,908,5.162,909,5.162,910,6.185]],["title/miscellaneous/functions.html",[906,1.745,911,3.69]],["body/miscellaneous/functions.html",[10,0.677,18,1.716,19,0.019,20,1.457,21,0.824,22,1.38,70,0.018,71,0.018,129,3.576,328,3.235,329,2.99,523,3.897,524,4.678,587,3.529,598,3.897,601,4.39,848,5.27,849,4.39,906,2.99,911,4.39,912,5.139,913,4.39]],["title/index.html",[10,0.395,914,2.999,915,2.999]],["body/index.html",[4,0.207,19,0.021,70,0.015,71,0.015,195,2.455,748,3.333,765,3.333,834,2.958,916,3.901,917,3.901,918,5.182,919,3.901,920,3.901,921,3.901,922,3.901,923,3.901,924,3.901,925,5.818,926,3.901,927,3.901,928,3.901,929,5.818,930,6.769,931,3.901,932,3.901,933,3.901,934,6.634,935,3.901,936,3.901,937,5.182,938,3.901,939,3.901,940,3.901,941,3.901,942,5.182,943,5.182,944,3.901,945,3.901,946,3.901,947,5.182,948,5.182,949,3.901,950,3.901,951,3.901,952,3.901,953,3.901,954,3.333,955,3.901,956,3.901,957,3.901,958,3.901,959,3.901,960,3.901,961,3.901,962,3.901,963,3.901,964,3.333,965,3.901,966,3.901,967,3.901,968,3.901,969,3.901,970,3.901,971,3.333]],["title/modules.html",[74,2.181]],["body/modules.html",[19,0.017,70,0.017,71,0.017,73,3.11,74,2.199,125,3.392,135,3.11,136,2.874,137,2.874,138,2.874,148,2.874,954,5.779,972,6.498,973,6.498,974,7.141,975,6.765,976,6.765]],["title/overview.html",[977,4.187]],["body/overview.html",[2,1.181,19,0.021,29,3.079,31,2.725,53,1.946,55,2.297,56,3.204,70,0.013,71,0.013,72,1.117,73,3.383,74,1.489,115,1.81,121,3.127,125,4.845,126,1.81,127,2.105,128,2.105,129,1.81,130,2.105,131,2.105,132,2.858,133,2.858,134,2.858,135,3.383,136,3.783,137,3.383,138,3.858,139,2.937,140,2.105,141,2.105,148,4.15,157,1.322,306,2.858,308,2.858,309,2.858,310,3.383,311,3.383,312,3.383,360,2.537,428,2.537,433,2.858,434,2.858,435,2.858,436,4.092,580,2.297,716,2.858,717,2.858,719,2.858,842,2.858,977,2.858,978,3.345,979,3.345]],["title/properties.html",[324,1.525,856,2.562]],["body/properties.html",[19,0.021,70,0.018,71,0.018,195,3.434,324,1.926,964,4.661,971,4.661,980,5.456,981,5.456,982,5.456]],["title/miscellaneous/typealiases.html",[906,1.745,983,4.319]],["body/miscellaneous/typealiases.html",[10,0.729,19,0.018,21,0.887,70,0.018,71,0.018,512,4.888,587,3.8,906,3.22,913,4.728,984,5.534]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":981,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["0.1.8",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":850,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":53,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["1.0.0",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["1.0.38",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["1.0.6",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["1.1.23",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["1.4.11",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["1.8.6",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":979,"title":{},"body":{"overview.html":{}}}],["14",{"_index":842,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["16).tostring(16",{"_index":747,"title":{},"body":{"modules/UserModule.html":{}}}],["17.1.1",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["17.1.14",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":55,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"overview.html":{}}}],["2.0.0",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["2.2.1",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["2.4.6",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":598,"title":{},"body":{"injectables/TransformInterceptor.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["3",{"_index":56,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"overview.html":{}}}],["3.2.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["3/21",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":502,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["5.4.0",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["6.4.14",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["6.9.9",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":978,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":563,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["8.11.3",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":429,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_accesstoken",{"_index":476,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["_refreshtoken",{"_index":471,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["abstract",{"_index":358,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access",{"_index":58,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["accesstoken",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NaverUserStrategy.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["addbearerauth",{"_index":334,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["ajfldjsaflkgjdlf",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["aliases",{"_index":984,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":955,"title":{},"body":{"index.html":{}}}],["apicreatedresponse",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apicreatedresponse({description",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam({name",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":371,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["apiproperty({required",{"_index":620,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["apitags",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('user",{"_index":694,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('userentity",{"_index":648,"title":{},"body":{"entities/User.html":{}}}],["app",{"_index":932,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":122,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfigmodule",{"_index":73,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appcontroller",{"_index":114,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":924,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":125,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":121,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":558,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["argumentshost",{"_index":509,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array(32",{"_index":744,"title":{},"body":{"modules/UserModule.html":{}}}],["async",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["attach_save_path",{"_index":98,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["auth",{"_index":156,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"coverage.html":{}}}],["auth.controller",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":617,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["auth.dto.ts",{"_index":377,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["auth.service",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{}}}],["auth/auth.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/guard/bearer",{"_index":691,"title":{},"body":{"controllers/UserController.html":{}}}],["auth/interface/request",{"_index":692,"title":{},"body":{"controllers/UserController.html":{}}}],["auth/pipe/password.pipe",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["authcontroller",{"_index":159,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":462,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{}}}],["authguard(providerenum.google",{"_index":461,"title":{},"body":{"injectables/GoogleUserGuard.html":{}}}],["authguard(providerenum.local",{"_index":535,"title":{},"body":{"injectables/LocalUserGuard.html":{}}}],["authguard(providerenum.naver",{"_index":546,"title":{},"body":{"injectables/NaverUserGuard.html":{}}}],["authmodule",{"_index":148,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":964,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":431,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":973,"title":{},"body":{"modules.html":{}}}],["await",{"_index":50,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":956,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":561,"title":{},"body":{"injectables/PasswordPipe.html":{},"injectables/UserService.html":{}}}],["base64",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["baseapidocument",{"_index":322,"title":{"classes/BaseAPIDocument.html":{}},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["baseentity",{"_index":341,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["basictokenguard",{"_index":242,"title":{"guards/BasicTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"coverage.html":{}}}],["bcrypt",{"_index":644,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(inputpassword",{"_index":668,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.gensalt(10",{"_index":664,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(confirmpassword",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(newpassword",{"_index":666,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":645,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bearertokenguard",{"_index":9,"title":{"guards/BearerTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["beforeinsert",{"_index":641,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body('email",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('otp",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":627,"title":{},"body":{"entities/User.html":{}}}],["bootstrap",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":974,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":975,"title":{},"body":{"modules.html":{}}}],["build",{"_index":340,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["builder",{"_index":326,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["building",{"_index":919,"title":{},"body":{"index.html":{}}}],["cache",{"_index":570,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["cachemodule",{"_index":566,"title":{},"body":{"modules/RedisModule.html":{}}}],["cachemodule.registerasync",{"_index":572,"title":{},"body":{"modules/RedisModule.html":{}}}],["callback",{"_index":742,"title":{},"body":{"modules/UserModule.html":{}}}],["callback(null",{"_index":749,"title":{},"body":{"modules/UserModule.html":{}}}],["callbackurl",{"_index":487,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["callhandler",{"_index":591,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["canactivate(context",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["catch",{"_index":499,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{}}}],["catch(exception",{"_index":508,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":514,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cb",{"_index":733,"title":{},"body":{"modules/UserModule.html":{}}}],["cb(null",{"_index":740,"title":{},"body":{"modules/UserModule.html":{}}}],["changepassword",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"injectables/UserService.html":{}}}],["changepassword(email",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(userid",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["changepasswordbyemail",{"_index":752,"title":{},"body":{"injectables/UserService.html":{}}}],["changepasswordbyemail(email",{"_index":770,"title":{},"body":{"injectables/UserService.html":{}}}],["changepassworddto",{"_index":176,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["checkpassword(inputpassword",{"_index":667,"title":{},"body":{"entities/User.html":{}}}],["class",{"_index":34,"title":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clientid",{"_index":483,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["clientsecret",{"_index":485,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["cluster_appmodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":433,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":434,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":435,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":716,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":717,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":718,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":719,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":642,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":628,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":630,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":636,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":624,"title":{},"body":{"entities/User.html":{}}}],["common/base.entity",{"_index":640,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["config/config.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":78,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":81,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":415,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"modules/RedisModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["configservice.get('attach_save_path')}/${format(new",{"_index":735,"title":{},"body":{"modules/UserModule.html":{}}}],["configservice.get('email_password",{"_index":457,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":454,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":455,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('google_auth_callback_url",{"_index":488,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["configservice.get('google_auth_client_id",{"_index":484,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["configservice.get('google_auth_client_secret",{"_index":486,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["configservice.get('naver_auth_callback_url",{"_index":551,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["configservice.get('naver_auth_client_id",{"_index":549,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["configservice.get('naver_auth_client_secret",{"_index":550,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":427,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":422,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":573,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_port",{"_index":574,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_ttl",{"_index":576,"title":{},"body":{"modules/RedisModule.html":{}}}],["confirmpassword",{"_index":370,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/UserService.html":{}}}],["console.log(emailuser",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(err",{"_index":669,"title":{},"body":{"entities/User.html":{}}}],["const",{"_index":39,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":36,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":362,"title":{},"body":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LocalUserStrategy.html":{}}}],["constructor(configservice",{"_index":442,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["constructor(private",{"_index":123,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/LocalUserStrategy.html":{}}}],["constructor(userrepository",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["context",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":41,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":606,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":113,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":693,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":834,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":616,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["createauthdto",{"_index":375,"title":{"classes/CreateAuthDto.html":{}},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["createdat",{"_index":343,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdatecolumn",{"_index":348,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createinfo",{"_index":848,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createinfo(status",{"_index":611,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["createinfo(statuscode",{"_index":601,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["createsocialuser",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["createsocialuser(socialuserdto",{"_index":772,"title":{},"body":{"injectables/UserService.html":{}}}],["createsocialuserdto",{"_index":378,"title":{"classes/CreateSocialUserDto.html":{}},"body":{"classes/CreateSocialUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createtokenaccess",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenaccess(@headers('authorization",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenaccess(rawtoken",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenrefresh",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenrefresh(@headers('authorization",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenrefresh(rawtoken",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtransport",{"_index":450,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuser",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":775,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":213,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.nickname",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":515,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":518,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":517,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["d",{"_index":658,"title":{},"body":{"entities/User.html":{}}}],["data",{"_index":530,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["database",{"_index":426,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":135,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":347,"title":{},"body":{"classes/BaseEntity.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":529,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["declarations",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":328,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletedat",{"_index":344,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletedatecolumn",{"_index":350,"title":{},"body":{"classes/BaseEntity.html":{}}}],["dependencies",{"_index":126,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["dest",{"_index":734,"title":{},"body":{"modules/UserModule.html":{}}}],["destination",{"_index":732,"title":{},"body":{"modules/UserModule.html":{}}}],["development",{"_index":933,"title":{},"body":{"index.html":{}}}],["diskpath",{"_index":697,"title":{},"body":{"controllers/UserController.html":{}}}],["diskpath.replace(/\\\\/gi",{"_index":704,"title":{},"body":{"controllers/UserController.html":{}}}],["diskstorage",{"_index":724,"title":{},"body":{"modules/UserModule.html":{}}}],["displayname",{"_index":491,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["documentation",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":330,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["done",{"_index":473,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["done(null",{"_index":490,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["dto/change",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/update",{"_index":690,"title":{},"body":{"controllers/UserController.html":{}}}],["e2e",{"_index":944,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":920,"title":{},"body":{"index.html":{}}}],["email",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["email.service",{"_index":438,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["email:password",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["emailexists",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["emailmodule",{"_index":136,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":436,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emailuser",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["emailuser.email",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["entities",{"_index":428,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/provider.enum",{"_index":400,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":722,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":621,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":430,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":637,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":907,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":500,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{}}}],["err.status",{"_index":501,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["error",{"_index":521,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.message",{"_index":532,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["example",{"_index":929,"title":{},"body":{"index.html":{}}}],["exception",{"_index":511,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":506,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":510,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":522,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":520,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":507,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["exist",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["existuser",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["export",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["exports",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":513,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":675,"title":{},"body":{"controllers/UserController.html":{}}}],["extends",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"classes/UpdateAuthDto.html":{},"entities/User.html":{}}}],["extname",{"_index":728,"title":{},"body":{"modules/UserModule.html":{}}}],["false",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["file.originalname",{"_index":702,"title":{},"body":{"controllers/UserController.html":{}}}],["file.path.replace",{"_index":698,"title":{},"body":{"controllers/UserController.html":{}}}],["file.size",{"_index":706,"title":{},"body":{"controllers/UserController.html":{}}}],["fileinterceptor",{"_index":688,"title":{},"body":{"controllers/UserController.html":{}}}],["filename",{"_index":701,"title":{},"body":{"controllers/UserController.html":{}}}],["filename(req",{"_index":741,"title":{},"body":{"modules/UserModule.html":{}}}],["fill(null",{"_index":745,"title":{},"body":{"modules/UserModule.html":{}}}],["finduserbyemail",{"_index":755,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(email",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbynickname",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbynickname(nickname",{"_index":779,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyphone",{"_index":757,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyphone(phone",{"_index":781,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserforpasswordreset",{"_index":758,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserforpasswordreset(userinfo",{"_index":783,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":725,"title":{},"body":{"modules/UserModule.html":{}}}],["forwardref",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["found",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["framework",{"_index":918,"title":{},"body":{"index.html":{}}}],["fs",{"_index":727,"title":{},"body":{"modules/UserModule.html":{}}}],["fs.existssync(dest",{"_index":737,"title":{},"body":{"modules/UserModule.html":{}}}],["fs.mkdirsync(dest",{"_index":738,"title":{},"body":{"modules/UserModule.html":{}}}],["function",{"_index":600,"title":{},"body":{"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["functions",{"_index":911,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('google/callback",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback')@useguards(googleuserguard)@apioperation({summary",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/google",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/google')@useguards(googleuserguard)@apioperation({summary",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/naver",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/naver')@useguards(naveruserguard)@apioperation({summary",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver/callback",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver/callback')@useguards(naveruserguard)@apioperation({summary",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({summary",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":914,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["getuser(@body('userid",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuser(userid",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["getuserbyemail",{"_index":759,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemail(email",{"_index":786,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid",{"_index":760,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid(userid",{"_index":788,"title":{},"body":{"injectables/UserService.html":{}}}],["google",{"_index":101,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/GoogleUserStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["google_auth_callback_url",{"_index":104,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_client_id",{"_index":102,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_client_secret",{"_index":103,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["googlelogin",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(@req",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(req",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleuserguard",{"_index":246,"title":{"injectables/GoogleUserGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleUserGuard.html":{},"coverage.html":{}}}],["googleuserstrategy",{"_index":310,"title":{"injectables/GoogleUserStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleUserStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":972,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":646,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["gravatar.url(this.email",{"_index":654,"title":{},"body":{"entities/User.html":{}}}],["grow",{"_index":951,"title":{},"body":{"index.html":{}}}],["guard",{"_index":359,"title":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{}},"body":{"coverage.html":{}}}],["guard/basic",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/bearer",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/google",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/naver",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":360,"title":{},"body":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"overview.html":{}}}],["handle",{"_index":608,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["hapi/joi",{"_index":77,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["hashpassword(newpassword",{"_index":662,"title":{},"body":{"entities/User.html":{}}}],["headers",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["hello",{"_index":154,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":961,"title":{},"body":{"index.html":{}}}],["host",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["host.switchtohttp",{"_index":516,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":477,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{}}}],["httpexception('not",{"_index":496,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/UserService.html":{}}}],["httpexceptionfilter",{"_index":504,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https",{"_index":661,"title":{},"body":{"entities/User.html":{}}}],["https://nestjs.com",{"_index":968,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/UserService.html":{}}}],["httpstatus.conflict",{"_index":498,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["httpstatus.not_found",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":345,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["imginfo",{"_index":700,"title":{},"body":{"controllers/UserController.html":{}}}],["imginfo.path",{"_index":708,"title":{},"body":{"controllers/UserController.html":{}}}],["imgpath",{"_index":710,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":35,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":80,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["initializeoptions",{"_index":327,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["inject",{"_index":417,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["instagram",{"_index":336,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["installation",{"_index":928,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":931,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":588,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":589,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":579,"title":{"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{}},"body":{"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["interface/request",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces",{"_index":580,"title":{},"body":{"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":647,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":395,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isemail()@apiproperty",{"_index":384,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isglobal",{"_index":577,"title":{},"body":{"modules/RedisModule.html":{}}}],["isnotempty",{"_index":396,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isstring",{"_index":397,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isstring()@apiproperty",{"_index":393,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":386,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isverified",{"_index":623,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["joi",{"_index":76,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().required",{"_index":85,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.object",{"_index":83,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required",{"_index":88,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["join",{"_index":748,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["jwt",{"_index":99,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["jwt_access_token_expiration_time",{"_index":112,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_access_token_secret",{"_index":111,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":110,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_refresh_token_secret",{"_index":109,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_secret_key",{"_index":100,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwtmodule",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{}}}],["kakao",{"_index":910,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kamil",{"_index":965,"title":{},"body":{"index.html":{}}}],["legend",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":971,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":948,"title":{},"body":{"index.html":{}}}],["light",{"_index":726,"title":{},"body":{"modules/UserModule.html":{},"dependencies.html":{}}}],["local",{"_index":539,"title":{},"body":{"injectables/LocalUserStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["localuserguard",{"_index":533,"title":{"injectables/LocalUserGuard.html":{}},"body":{"injectables/LocalUserGuard.html":{},"coverage.html":{}}}],["localuserstrategy",{"_index":311,"title":{"injectables/LocalUserStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalUserStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["loginemail",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginemail(@headers('authorization",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginemail(rawtoken",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":542,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["lts.1",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":448,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":445,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":568,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["map",{"_index":596,"title":{},"body":{"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{}}}],["markisverify",{"_index":761,"title":{},"body":{"injectables/UserService.html":{}}}],["markisverify(email",{"_index":790,"title":{},"body":{"injectables/UserService.html":{}}}],["matched",{"_index":497,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["matching",{"_index":71,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.round(math.random",{"_index":746,"title":{},"body":{"modules/UserModule.html":{}}}],["message",{"_index":525,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["metadata",{"_index":557,"title":{},"body":{"injectables/PasswordPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":398,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["minlength(7",{"_index":401,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["minlength(7)@isstring()@apiproperty",{"_index":388,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["miscellaneous",{"_index":906,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":947,"title":{},"body":{"index.html":{}}}],["mm",{"_index":659,"title":{},"body":{"entities/User.html":{}}}],["mode",{"_index":937,"title":{},"body":{"index.html":{}}}],["module",{"_index":72,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":960,"title":{},"body":{"index.html":{}}}],["msg",{"_index":604,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["multer",{"_index":97,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":723,"title":{},"body":{"modules/UserModule.html":{}}}],["multermodule.registerasync",{"_index":730,"title":{},"body":{"modules/UserModule.html":{}}}],["myśliwiec",{"_index":966,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naver",{"_index":105,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/NaverUserStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["naver_auth_callback_url",{"_index":108,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver_auth_client_id",{"_index":106,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver_auth_client_secret",{"_index":107,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naverlogin",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(@req",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(req",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["naveruserguard",{"_index":253,"title":{"injectables/NaverUserGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/NaverUserGuard.html":{},"coverage.html":{}}}],["naveruserstrategy",{"_index":312,"title":{"injectables/NaverUserStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/NaverUserStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["nest",{"_index":925,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":970,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":594,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nestjs/cache",{"_index":567,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":79,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"modules/RedisModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":463,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":689,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":414,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":45,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newtoken",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/UserService.html":{}}}],["next",{"_index":590,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nickname",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["nicknameexists",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":917,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":451,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":449,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":440,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":930,"title":{},"body":{"index.html":{}}}],["null",{"_index":531,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["nullable",{"_index":650,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":524,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["oauth2",{"_index":481,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"dependencies.html":{}}}],["object.assign",{"_index":610,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["observable",{"_index":593,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["open",{"_index":949,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":447,"title":{},"body":{"injectables/EmailService.html":{}}}],["otp",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["out",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":977,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":856,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["param('email",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":615,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["partialtype(createauthdto",{"_index":614,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["pass",{"_index":456,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":480,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":478,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["passportstrategy(strategy",{"_index":467,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["password",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["password')@apioperation({summary",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto.ts",{"_index":369,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:11",{"_index":373,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:5",{"_index":374,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:8",{"_index":372,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password/:email",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["password/:email)@apioperation({summary",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["password/new",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordpipe",{"_index":410,"title":{"injectables/PasswordPipe.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["path",{"_index":703,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["payload.interface.ts",{"_index":585,"title":{},"body":{"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["pg",{"_index":657,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["phone",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["phoneuser",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["picture",{"_index":492,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["pipe(map((data",{"_index":609,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["pipetransform",{"_index":560,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["please",{"_index":958,"title":{},"body":{"index.html":{}}}],["port",{"_index":421,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["portfolio",{"_index":338,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["post",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('change",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('email/verify",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('email/verify')@apioperation({summary",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login/email",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login/email')@useguards(basictokenguard)@apioperation({summary",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register/email",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register/email')@apioperation({summary",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send/email/reset",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/access",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/access')@useguards(refreshtokenguard)@apioperation({summary",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/refresh",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/refresh')@useguards(refreshtokenguard)@apioperation({summary",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('update/profile/:id",{"_index":709,"title":{},"body":{"controllers/UserController.html":{}}}],["post('update/profile/:id')@apioperation({summary",{"_index":676,"title":{},"body":{"controllers/UserController.html":{}}}],["post('upload",{"_index":681,"title":{},"body":{"controllers/UserController.html":{}}}],["post(`send/email/reset",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(send/email/reset",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":86,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":92,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_host",{"_index":87,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_password",{"_index":91,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_port",{"_index":89,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_user",{"_index":90,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["prefix",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":356,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":352,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":37,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["processusercredentials",{"_index":651,"title":{},"body":{"entities/User.html":{}}}],["production",{"_index":939,"title":{},"body":{"index.html":{}}}],["profile",{"_index":472,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["profile._json",{"_index":553,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["profile_image",{"_index":552,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["profileimg",{"_index":382,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profileimg')@apioperation({summary",{"_index":682,"title":{},"body":{"controllers/UserController.html":{}}}],["progressive",{"_index":916,"title":{},"body":{"index.html":{}}}],["project",{"_index":950,"title":{},"body":{"index.html":{}}}],["promise",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{}}}],["properties",{"_index":324,"title":{"properties.html":{}},"body":{"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/LoginUserDto.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/VerifyPayloadInterface.html":{},"properties.html":{}}}],["protocol",{"_index":660,"title":{},"body":{"entities/User.html":{}}}],["provider",{"_index":383,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["provider.enum",{"_index":643,"title":{},"body":{"entities/User.html":{}}}],["providerenum",{"_index":391,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["providerenum.local",{"_index":392,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":325,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"entities/User.html":{}}}],["r",{"_index":656,"title":{},"body":{"entities/User.html":{}}}],["randomname",{"_index":743,"title":{},"body":{"modules/UserModule.html":{}}}],["randomname}${extname(file.originalname",{"_index":750,"title":{},"body":{"modules/UserModule.html":{}}}],["rawtoken",{"_index":42,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["read",{"_index":959,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["recursive",{"_index":739,"title":{},"body":{"modules/UserModule.html":{}}}],["redis",{"_index":93,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["redis/redis.module",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["redis_host",{"_index":94,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_port",{"_index":95,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_ttl",{"_index":96,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redismodule",{"_index":137,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisstore",{"_index":569,"title":{},"body":{"modules/RedisModule.html":{}}}],["reflect",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":59,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["refreshtoken",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NaverUserStrategy.html":{}}}],["refreshtokenguard",{"_index":68,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["registeremail",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeremail(@body",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeremail(createuserdto",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["repository",{"_index":765,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":40,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["req.headers['authorization",{"_index":43,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.token",{"_index":62,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.tokentype",{"_index":63,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.user",{"_index":61,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["request",{"_index":52,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{}}}],["requestuser",{"_index":201,"title":{"interfaces/RequestUser.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestUser.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["required",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["res",{"_index":605,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["res.statuscode",{"_index":607,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["reset",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetnewpassword",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetnewpassword(email",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(@body('userinfo",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(userinfo",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["response",{"_index":512,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["response.status(status).json",{"_index":527,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":49,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["result.type",{"_index":64,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["results",{"_index":70,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":65,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/LocalUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returntype",{"_index":602,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["run",{"_index":934,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":595,"title":{},"body":{"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":597,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["s",{"_index":655,"title":{},"body":{"entities/User.html":{}}}],["saltvalue",{"_index":663,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["scalable",{"_index":921,"title":{},"body":{"index.html":{}}}],["scope",{"_index":489,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["sendmail",{"_index":441,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":444,"title":{},"body":{"injectables/EmailService.html":{}}}],["server",{"_index":922,"title":{},"body":{"index.html":{}}}],["service",{"_index":453,"title":{},"body":{"injectables/EmailService.html":{}}}],["service_port",{"_index":84,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["setdescription('jisu",{"_index":337,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["settitle('jisu",{"_index":335,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["setversion('1.0",{"_index":339,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["side",{"_index":923,"title":{},"body":{"index.html":{}}}],["size",{"_index":705,"title":{},"body":{"controllers/UserController.html":{}}}],["social",{"_index":380,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["socialuserdto",{"_index":774,"title":{},"body":{"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"index.html":{}}}],["sponsors",{"_index":953,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":912,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../provider.enum.ts",{"_index":908,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../transform.interceptor.ts",{"_index":913,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":152,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":153,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:103",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:111",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:120",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:131",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:140",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:150",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:161",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:169",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:180",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:71",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:84",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/change",{"_index":368,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":376,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":543,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":613,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":158,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guard/basic",{"_index":361,"title":{},"body":{"guards/BasicTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/bearer",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/google",{"_index":459,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"coverage.html":{}}}],["src/auth/guard/local",{"_index":534,"title":{},"body":{"injectables/LocalUserGuard.html":{},"coverage.html":{}}}],["src/auth/guard/naver",{"_index":545,"title":{},"body":{"injectables/NaverUserGuard.html":{},"coverage.html":{}}}],["src/auth/interface/request",{"_index":581,"title":{},"body":{"interfaces/RequestUser.html":{},"coverage.html":{}}}],["src/auth/interface/token",{"_index":584,"title":{},"body":{"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/interface/verify",{"_index":833,"title":{},"body":{"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/pipe/password.pipe.ts",{"_index":554,"title":{},"body":{"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["src/auth/pipe/password.pipe.ts:10",{"_index":559,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["src/auth/stratges/google",{"_index":465,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"coverage.html":{}}}],["src/auth/stratges/local",{"_index":536,"title":{},"body":{"injectables/LocalUserStrategy.html":{},"coverage.html":{}}}],["src/auth/stratges/naver",{"_index":547,"title":{},"body":{"injectables/NaverUserStrategy.html":{},"coverage.html":{}}}],["src/common/base.entity.ts",{"_index":342,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/base.entity.ts:10",{"_index":353,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:13",{"_index":349,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:16",{"_index":355,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:19",{"_index":351,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/filter/http",{"_index":505,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/inceptors/transform.interceptor.ts",{"_index":587,"title":{},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/inceptors/transform.interceptor.ts:35",{"_index":592,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/config/config.module.ts",{"_index":75,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["src/config/swagger.documents.ts",{"_index":323,"title":{},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["src/config/swagger.documents.ts:4",{"_index":331,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/config/swagger.documents.ts:6",{"_index":332,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/database/database.module.ts",{"_index":412,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email/email.module.ts",{"_index":437,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":439,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:18",{"_index":446,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":443,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":849,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/redis/redis.module.ts",{"_index":565,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/user/dto/create",{"_index":379,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":619,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/provider.enum.ts",{"_index":909,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/entities/user.entity.ts",{"_index":622,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":626,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:24",{"_index":631,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:31",{"_index":633,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:37",{"_index":635,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:68",{"_index":632,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:75",{"_index":634,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:84",{"_index":639,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:89",{"_index":629,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":671,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:32",{"_index":684,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:61",{"_index":678,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":720,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":751,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:105",{"_index":782,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:111",{"_index":784,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:125",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:139",{"_index":771,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:151",{"_index":789,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:158",{"_index":791,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:172",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:184",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:55",{"_index":773,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:71",{"_index":785,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:84",{"_index":787,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:93",{"_index":778,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:99",{"_index":780,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":935,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":938,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":940,"title":{},"body":{"index.html":{}}}],["started",{"_index":915,"title":{"index.html":{}},"body":{}}],["starter",{"_index":927,"title":{},"body":{"index.html":{}}}],["statements",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":519,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["statuscode",{"_index":523,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["stay",{"_index":962,"title":{},"body":{"index.html":{}}}],["storage",{"_index":731,"title":{},"body":{"modules/UserModule.html":{}}}],["store",{"_index":571,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":479,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["stratges/google",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["stratges/local",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{}}}],["stratges/naver",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["success",{"_index":599,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["summary",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":482,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["super.canactivate(context",{"_index":66,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["support",{"_index":954,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":976,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":432,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":603,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["table",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":943,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":946,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":945,"title":{},"body":{"index.html":{}}}],["tests",{"_index":942,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":952,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.authenticatewithemailandpassword",{"_index":365,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["this.authservice.changepassword(email",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.confirmotp(email",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.decodebasictoken(token",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{}}}],["this.authservice.extracttokenfromheader(rawtoken",{"_index":47,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.authservice.finduser",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalUserStrategy.html":{}}}],["this.authservice.getuser(userid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginuser(user",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginwithemail",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginwithemail(credentials",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.registerwithemail(createuserdto",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(userinfo",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.rotatetoken(token",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendverificationlink(createuserdto.email",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifytoken(token",{"_index":51,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.builder",{"_index":333,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["this.configservice.get('attach_save_path",{"_index":699,"title":{},"body":{"controllers/UserController.html":{}}}],["this.finduserbyemail(email",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduserbyemail(userinfo",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduserbyphone(userinfo",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getuserbyid(id",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["this.nodemailertransport",{"_index":452,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":458,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.password",{"_index":665,"title":{},"body":{"entities/User.html":{}}}],["this.profileimg",{"_index":653,"title":{},"body":{"entities/User.html":{}}}],["this.provider",{"_index":652,"title":{},"body":{"entities/User.html":{}}}],["this.userrepository.create",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create(socialuserdto",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.exists",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":831,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createsocialuser",{"_index":503,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["this.userservice.finduserbyemail(email",{"_index":494,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["this.userservice.getuserbyemail(result.email",{"_index":60,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.userservice.updateprofile",{"_index":712,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateprofileimg(user.id",{"_index":707,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":44,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":528,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["token",{"_index":46,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["token.guard",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:11",{"_index":366,"title":{},"body":{"guards/BearerTokenGuard.html":{}}}],["token.guard.ts:16",{"_index":367,"title":{},"body":{"guards/BearerTokenGuard.html":{}}}],["token.guard.ts:29",{"_index":363,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["token.guard.ts:32",{"_index":364,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["token.guard.ts:48",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:63",{"_index":578,"title":{},"body":{"injectables/RefreshTokenGuard.html":{}}}],["tokenpayloadinterface",{"_index":583,"title":{"interfaces/TokenPayloadInterface.html":{}},"body":{"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["tokentype",{"_index":57,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["touch",{"_index":963,"title":{},"body":{"index.html":{}}}],["transform",{"_index":555,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["transform(value",{"_index":556,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["transformer",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["transforminterceptor",{"_index":586,"title":{"injectables/TransformInterceptor.html":{}},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":48,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty",{"_index":625,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":493,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{}}}],["ttl",{"_index":575,"title":{},"body":{"modules/RedisModule.html":{}}}],["twitter",{"_index":969,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":983,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":526,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["typeorm",{"_index":357,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":413,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":729,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":416,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/bcryptjs",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["types/gravatar",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":926,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception('access",{"_index":67,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception('refresh",{"_index":69,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["undefined})@apiproperty",{"_index":638,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":649,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":941,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":982,"title":{},"body":{"properties.html":{}}}],["updateauthdto",{"_index":612,"title":{"classes/UpdateAuthDto.html":{}},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":346,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":354,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateprofile",{"_index":672,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateprofile(id",{"_index":792,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(req",{"_index":674,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofileimg",{"_index":762,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileimg(userid",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":618,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updateuserdto.nickname",{"_index":715,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserdto.password",{"_index":714,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadedfile",{"_index":685,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadprofileimg",{"_index":673,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadprofileimg(req",{"_index":680,"title":{},"body":{"controllers/UserController.html":{}}}],["usefactory",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(accesstokenguard",{"_index":696,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard)@useinterceptors(undefined)@apicreatedresponse({description",{"_index":677,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(basictokenguard",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(googleuserguard",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(naveruserguard",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":686,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":695,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(undefined)@useguards(accesstokenguard",{"_index":683,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":54,"title":{"entities/User.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":721,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":381,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:13",{"_index":385,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:16",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":389,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:20",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":394,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:24",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":390,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:28",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":544,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:8",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:9",{"_index":387,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.email",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["user.guard",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.guard.ts",{"_index":460,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{},"coverage.html":{}}}],["user.hashpassword(password",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["user.id",{"_index":713,"title":{},"body":{"controllers/UserController.html":{}}}],["user.interface",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["user.interface.ts",{"_index":582,"title":{},"body":{"interfaces/RequestUser.html":{},"coverage.html":{}}}],["user.nickname",{"_index":830,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profileimg",{"_index":711,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.provider",{"_index":495,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["user.service",{"_index":687,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.strategy",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{}}}],["user.strategy.ts",{"_index":466,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"coverage.html":{}}}],["user.strategy.ts:16",{"_index":538,"title":{},"body":{"injectables/LocalUserStrategy.html":{}}}],["user.strategy.ts:20",{"_index":475,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["user.strategy.ts:8",{"_index":469,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["user/dto/create",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/entities/provider.enum",{"_index":464,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{}}}],["user/entities/user.entity",{"_index":540,"title":{},"body":{"injectables/LocalUserStrategy.html":{},"interfaces/RequestUser.html":{}}}],["user/user.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{}}}],["usercontroller",{"_index":670,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/UserService.html":{}}}],["userinfo",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":138,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernamefield",{"_index":541,"title":{},"body":{"injectables/LocalUserStrategy.html":{}}}],["userrepository",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":31,"title":{"injectables/UserService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":468,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["validate(_accesstoken",{"_index":470,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["validate(accesstoken",{"_index":548,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["validate(email",{"_index":537,"title":{},"body":{"injectables/LocalUserStrategy.html":{}}}],["validateemail",{"_index":763,"title":{},"body":{"injectables/UserService.html":{}}}],["validateemail(email",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["validationschema",{"_index":82,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validator",{"_index":399,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":329,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/PasswordPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["value.tostring",{"_index":564,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["value.tostring().length",{"_index":562,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["verifycallback",{"_index":474,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["verifyemail",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemail(@body('token",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemail(token",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypayloadinterface",{"_index":832,"title":{"interfaces/VerifyPayloadInterface.html":{}},"body":{"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["version",{"_index":980,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":936,"title":{},"body":{"index.html":{}}}],["website",{"_index":967,"title":{},"body":{"index.html":{}}}],["world",{"_index":155,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":679,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["you'd",{"_index":957,"title":{},"body":{"index.html":{}}}],["yyyy}{mm",{"_index":736,"title":{},"body":{"modules/UserModule.html":{}}}],["zoom",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/bearer-token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BearerTokenGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const result = await this.authService.verifyToken(token);\n\n    /**\n     * request에 넣을 정보\n     *\n     * 1) 사용자 정보 - user\n     * 2) token - token\n     * 3) tokenType - access | refresh\n     * */\n\n    const user = await this.userService.getUserByEmail(result.email);\n    req.user = user;\n    req.token = token;\n    req.tokenType = result.type;\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'access') {\n      throw new UnauthorizedException('Access Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'refresh') {\n      throw new UnauthorizedException('Refresh Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        SERVICE_PORT: Joi.number().required(),\n        // Postgres 설정\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n\n        // Redis 설정\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_TTL: Joi.number().required(),\n\n        // Multer 설정 [파일 업로드]\n        ATTACH_SAVE_PATH: Joi.string().required(),\n\n        // JWT 설정\n        JWT_SECRET_KEY: Joi.string().required(),\n\n        // Google 설정\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n        GOOGLE_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        // Naver 설정\n        NAVER_AUTH_CLIENT_ID: Joi.string().required(),\n        NAVER_AUTH_CLIENT_SECRET: Joi.string().required(),\n        NAVER_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n      }),\n    }),\n  ],\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AppConfigModule } from './config/config.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { EmailModule } from './email/email.module';\nimport { RedisModule } from './redis/redis.module';\n\n@Module({\n  imports: [\n    AppConfigModule,\n    DatabaseModule,\n    UserModule,\n    forwardRef(() => AuthModule),\n    EmailModule,\n    RedisModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createTokenAccess\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createTokenRefresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLoginCallback\n                            \n                            \n                                    \n                                    \n                                    \n                                loginEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLoginCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                registerEmail\n                            \n                            \n                                    \n                                    \n                                    Async\n                                resetNewPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(email: string, changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@ApiOperation({summary: '로그인 후 비밀번호 변경'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createTokenAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTokenAccess(rawToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token/access')@UseGuards(RefreshTokenGuard)@ApiOperation({summary: 'AccessToken 발급'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createTokenRefresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTokenRefresh(rawToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token/refresh')@UseGuards(RefreshTokenGuard)@ApiOperation({summary: 'RefreshToken 발급'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '유저 정보 가져오기'})@ApiParam({name: 'userID', required: true, description: '유저 아이디'})@ApiCreatedResponse({description: '유저 정보 가져오기'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login/google')@UseGuards(GoogleUserGuard)@ApiOperation({summary: '구글 소셜 로그인'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLoginCallback(req: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(GoogleUserGuard)@ApiOperation({summary: '구글 소셜 로그인 콜백'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        loginEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginEmail(rawToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login/email')@UseGuards(BasicTokenGuard)@ApiOperation({summary: '유저 이메일 로그인'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login/naver')@UseGuards(NaverUserGuard)@ApiOperation({summary: '네이버 소셜 로그인'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:131\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLoginCallback(req: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('naver/callback')@UseGuards(NaverUserGuard)@ApiOperation({summary: '네이버 소셜 로그인 콜백'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        registerEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerEmail(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register/email')@ApiOperation({summary: '유저 이메일 가입'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        resetNewPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetNewPassword(email: string, otp: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(send/email/reset-password/new-password/:email)@ApiOperation({summary: '비밀번호 초기화 이메일 전송'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(userInfo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send/email/reset-password')@ApiOperation({summary: '로그인 전 비밀번호 초기화'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userInfo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyEmail(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('email/verify')@ApiOperation({summary: '이메일 본인인증'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Headers,\n  HttpStatus,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport {\n  ApiCreatedResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreateUserDto } from '../user/dto/create-user.dto';\nimport { BasicTokenGuard } from './guard/basic-token.guard';\nimport { RefreshTokenGuard } from './guard/bearer-token.guard';\nimport { GoogleUserGuard } from './guard/google-user.guard';\nimport { RequestUser } from './interface/request-user.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { NaverUserGuard } from './guard/naver-user.guard';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('token/access')\n  @UseGuards(RefreshTokenGuard)\n  @ApiOperation({\n    summary: 'AccessToken 발급',\n  })\n  async createTokenAccess(@Headers('authorization') rawToken: string) {\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    /**\n     * {accessToken : {token}}\n     */\n    const newToken = this.authService.rotateToken(token, false);\n    return {\n      accessToken: newToken,\n    };\n  }\n\n  @Post('token/refresh')\n  @UseGuards(RefreshTokenGuard)\n  @ApiOperation({\n    summary: 'RefreshToken 발급',\n  })\n  async createTokenRefresh(@Headers('authorization') rawToken: string) {\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    /**\n     * {refreshToken : {token}}\n     */\n    const newToken = this.authService.rotateToken(token, true);\n    return {\n      refreshToken: newToken,\n    };\n  }\n\n  @Post('login/email')\n  @UseGuards(BasicTokenGuard)\n  @ApiOperation({\n    summary: '유저 이메일 로그인',\n  })\n  loginEmail(@Headers('authorization') rawToken: string) {\n    // token = email:password => base64\n    // ajfldjsaflkgjdlf => email:password\n    const token = this.authService.extractTokenFromHeader(rawToken, false);\n    const credentials = this.authService.decodeBasicToken(token);\n\n    return this.authService.loginWithEmail(credentials);\n  }\n\n  @Post('register/email')\n  @ApiOperation({\n    summary: '유저 이메일 가입',\n  })\n  async registerEmail(@Body() createUserDto: CreateUserDto) {\n    const newUser = this.authService.registerWithEmail(createUserDto);\n    await this.authService.sendVerificationLink(createUserDto.email);\n    return newUser;\n  }\n\n  // 유저 프로필 가져오기 [1명, by userId]\n  @Get()\n  @ApiOperation({\n    summary: '유저 정보 가져오기',\n  })\n  @ApiParam({\n    name: 'userID',\n    required: true,\n    description: '유저 아이디',\n  })\n  @ApiCreatedResponse({\n    description: '유저 정보 가져오기',\n  })\n  async getUser(@Body('userId') userId: string) {\n    return await this.authService.getUser(userId);\n  }\n  @Get('login/google')\n  @UseGuards(GoogleUserGuard)\n  @ApiOperation({\n    summary: '구글 소셜 로그인',\n  })\n  async googleLogin() {\n    return HttpStatus.OK;\n  }\n\n  @Get('google/callback')\n  @UseGuards(GoogleUserGuard)\n  @ApiOperation({\n    summary: '구글 소셜 로그인 콜백',\n  })\n  async googleLoginCallback(@Req() req: RequestUser) {\n    const { user } = req;\n    const token = await this.authService.loginUser(user);\n    return token;\n  }\n\n  @Get('login/naver')\n  @UseGuards(NaverUserGuard)\n  @ApiOperation({\n    summary: '네이버 소셜 로그인',\n  })\n  async naverLogin() {\n    return HttpStatus.OK;\n  }\n\n  @Get('naver/callback')\n  @UseGuards(NaverUserGuard)\n  @ApiOperation({\n    summary: '네이버 소셜 로그인 콜백',\n  })\n  async naverLoginCallback(@Req() req: RequestUser) {\n    const { user } = req;\n    const token = await this.authService.loginUser(user);\n    return token;\n  }\n\n  @Post('change-password')\n  @ApiOperation({\n    summary: '로그인 후 비밀번호 변경',\n  })\n  async changePassword(\n    @Body('email') email: string,\n    @Body() changePasswordDto: ChangePasswordDto,\n  ) {\n    return await this.authService.changePassword(email, changePasswordDto);\n  }\n\n  @Post('send/email/reset-password')\n  @ApiOperation({\n    summary: '로그인 전 비밀번호 초기화',\n  })\n  async resetPassword(@Body('userInfo') userInfo: string) {\n    return await this.authService.resetPassword(userInfo);\n  }\n\n  @Post(`send/email/reset-password/new-password/:email`)\n  @ApiOperation({\n    summary: '비밀번호 초기화 이메일 전송',\n  })\n  async resetNewPassword(\n    @Param('email') email: string,\n    @Body('otp') otp: string,\n  ) {\n    return await this.authService.confirmOTP(email, otp);\n  }\n\n  @Post('email/verify')\n  @ApiOperation({\n    summary: '이메일 본인인증',\n  })\n  async verifyEmail(@Body('token') token: string) {\n    const { email, password } = this.authService.decodeBasicToken(token);\n    const user = await this.authService.findUser({\n      email,\n      password,\n    });\n\n    if (!user) {\n      return await this.authService.loginWithEmail({\n        email,\n        password,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleUserStrategy\n\nGoogleUserStrategy\n\nAuthModule -->\n\nGoogleUserStrategy->AuthModule\n\n\n\n\n\nLocalUserStrategy\n\nLocalUserStrategy\n\nAuthModule -->\n\nLocalUserStrategy->AuthModule\n\n\n\n\n\nNaverUserStrategy\n\nNaverUserStrategy\n\nAuthModule -->\n\nNaverUserStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleUserStrategy\n                        \n                        \n                            LocalUserStrategy\n                        \n                        \n                            NaverUserStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UserModule } from '../user/user.module';\nimport { LocalUserStrategy } from './stratges/local-user.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { GoogleUserStrategy } from './stratges/google-user.strategy';\nimport { NaverUserStrategy } from './stratges/naver-user.strategy';\nimport { EmailModule } from '../email/email.module';\nimport { RedisModule } from '../redis/redis.module';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    JwtModule.register({}),\n    ConfigModule,\n    EmailModule,\n    RedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalUserStrategy,\n    GoogleUserStrategy,\n    NaverUserStrategy,\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAPIDocument.html":{"url":"classes/BaseAPIDocument.html","title":"class - BaseAPIDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAPIDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/swagger.documents.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                builder\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                initializeOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        builder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DocumentBuilder()\n                    \n                \n                    \n                        \n                                Defined in src/config/swagger.documents.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/config/swagger.documents.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentBuilder } from '@nestjs/swagger';\n\nexport class BaseAPIDocument {\n  public builder = new DocumentBuilder();\n\n  public initializeOptions() {\n    return this.builder\n      .addBearerAuth()\n      .setTitle('jisu-instagram')\n      .setDescription('jisu-instagram portfolio')\n      .setVersion('1.0')\n      .build();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    Public\n                                deletedAt\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @CreateDateColumn()\n  public createdAt: Date;\n\n  @UpdateDateColumn()\n  public updatedAt: Date;\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/BasicTokenGuard.html":{"url":"guards/BasicTokenGuard.html","title":"guard - BasicTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    BasicTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/basic-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/basic-token.guard.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/basic-token.guard.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class BasicTokenGuard implements CanActivate {\n  constructor(private readonly authService: AuthService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, false);\n\n    const { email, password } = this.authService.decodeBasicToken(token);\n\n    const user = await this.authService.authenticateWithEmailAndPassword({\n      email,\n      password,\n    });\n\n    req.user = user;\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/BearerTokenGuard.html":{"url":"guards/BearerTokenGuard.html","title":"guard - BearerTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    BearerTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/bearer-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/bearer-token.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const result = await this.authService.verifyToken(token);\n\n    /**\n     * request에 넣을 정보\n     *\n     * 1) 사용자 정보 - user\n     * 2) token - token\n     * 3) tokenType - access | refresh\n     * */\n\n    const user = await this.userService.getUserByEmail(result.email);\n    req.user = user;\n    req.token = token;\n    req.tokenType = result.type;\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'access') {\n      throw new UnauthorizedException('Access Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'refresh') {\n      throw new UnauthorizedException('Refresh Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ChangePasswordDto {\n  @ApiProperty()\n  password: string;\n\n  @ApiProperty()\n  changePassword: string;\n\n  @ApiProperty()\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSocialUserDto.html":{"url":"classes/CreateSocialUserDto.html","title":"class - CreateSocialUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSocialUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-social-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(7)@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProviderEnum\n\n                    \n                \n                \n                    \n                        Default value : ProviderEnum.LOCAL\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ProviderEnum } from '../entities/provider.enum';\n\nexport class CreateSocialUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  name: string;\n\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @MinLength(7)\n  @IsString()\n  @ApiProperty()\n  password?: string;\n\n  @IsString()\n  @ApiProperty()\n  provider?: ProviderEnum = ProviderEnum.LOCAL;\n\n  @ApiProperty()\n  profileImg?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nickname\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                    Optional\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProviderEnum\n\n                    \n                \n                \n                    \n                        Default value : ProviderEnum.LOCAL\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ProviderEnum } from '../entities/provider.enum';\nimport { PasswordPipe } from '../../auth/pipe/password.pipe';\n\nexport class CreateUserDto {\n  // 유저 이메일\n  @ApiProperty()\n  email: string;\n\n  // 유저 이름\n  @ApiProperty()\n  name: string;\n\n  // 유저 비밀번호\n  @ApiProperty()\n  password: string;\n\n  // 유저 닉네임\n  @ApiProperty()\n  nickname: string;\n\n  // 유저 휴대폰번호\n  @ApiProperty()\n  phone: string;\n\n  // 유저 가입경로\n  @ApiProperty()\n  provider?: ProviderEnum = ProviderEnum.LOCAL;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/email/email.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Mail.Options\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleUserGuard.html":{"url":"injectables/GoogleUserGuard.html","title":"injectable - GoogleUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google-user.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(ProviderEnum.GOOGLE)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProviderEnum } from '../../user/entities/provider.enum';\n\n@Injectable()\nexport class GoogleUserGuard extends AuthGuard(ProviderEnum.GOOGLE) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleUserStrategy.html":{"url":"injectables/GoogleUserStrategy.html","title":"injectable - GoogleUserStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleUserStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/stratges/google-user.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/stratges/google-user.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/stratges/google-user.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class GoogleUserStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_AUTH_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_AUTH_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_AUTH_CALLBACK_URL'),\n      scope: ['profile', 'email'],\n    });\n  }\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    //done(null, profile);\n    const { provider, displayName, email, picture } = profile;\n    try {\n      const user = await this.userService.findUserByEmail(email);\n      if (user.provider !== provider) {\n        throw new HttpException('Not Matched Provider', HttpStatus.CONFLICT);\n      }\n      done(null, user);\n    } catch (err) {\n      if (err.status === 404) {\n        // 회원가입 프로세스\n        const newUser = await this.userService.createSocialUser({\n          email,\n          name: displayName,\n          profileImg: picture,\n          provider,\n        });\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filter/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  HttpException,\n  ExceptionFilter,\n  ArgumentsHost,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const error = exception.getResponse() as\n      | string\n      | { error: string; statusCode: number; message: string | string[] };\n\n    if (typeof error === 'string') {\n      response.status(status).json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        message: error,\n        data: null,\n      });\n    } else {\n      response.status(status).json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        message: error.message,\n        data: null,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalUserGuard.html":{"url":"injectables/LocalUserGuard.html","title":"injectable - LocalUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local-user.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(ProviderEnum.LOCAL)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProviderEnum } from '../../user/entities/provider.enum';\n\n@Injectable()\nexport class LocalUserGuard extends AuthGuard(ProviderEnum.LOCAL) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalUserStrategy.html":{"url":"injectables/LocalUserStrategy.html","title":"injectable - LocalUserStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalUserStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/stratges/local-user.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/stratges/local-user.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/stratges/local-user.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\nimport { User } from '../../user/entities/user.entity';\n\n@Injectable()\nexport class LocalUserStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      // 이메일 가입자 로컬인 경우 email 필드로 확인\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return await this.authService.findUser({\n      email,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginUserDto {\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverUserGuard.html":{"url":"injectables/NaverUserGuard.html","title":"injectable - NaverUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/naver-user.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(ProviderEnum.NAVER)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProviderEnum } from '../../user/entities/provider.enum';\n\n@Injectable()\nexport class NaverUserGuard extends AuthGuard(ProviderEnum.NAVER) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverUserStrategy.html":{"url":"injectables/NaverUserStrategy.html","title":"injectable - NaverUserStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverUserStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/stratges/naver-user.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/stratges/naver-user.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/stratges/naver-user.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-naver';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class NaverUserStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('NAVER_AUTH_CLIENT_ID'),\n      clientSecret: configService.get('NAVER_AUTH_CLIENT_SECRET'),\n      callbackURL: configService.get('NAVER_AUTH_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ): Promise {\n    done(null, profile);\n    const { provider, displayName } = profile;\n    const { email, profile_image } = profile._json;\n    //done(null, profile);\n    try {\n      // 이메일 유무 확인\n      const user = await this.userService.findUserByEmail(email);\n      // 이메일 있으면 provider 체크\n      if (user.provider !== provider) {\n      }\n      // 이메일 저장되있고, provider도 맞으면\n      done(null, user);\n    } catch (err) {\n      // 없는 경우 회원가입 프로세스\n      const newUser = await this.userService.createSocialUser({\n        email,\n        name: displayName,\n        profileImg: profile_image,\n        provider,\n      });\n      done(null, newUser);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordPipe.html":{"url":"injectables/PasswordPipe.html","title":"injectable - PasswordPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/pipe/password.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/pipe/password.pipe.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class PasswordPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata): any {\n    if (value.toString().length > 8) {\n      throw new BadRequestException('비밀번호는 8자 이하로 입력해주세요!');\n    }\n    return value.toString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: configService.get('REDIS_TTL'),\n      }),\n      isGlobal: true,\n    }),\n  ],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/bearer-token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BearerTokenGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const result = await this.authService.verifyToken(token);\n\n    /**\n     * request에 넣을 정보\n     *\n     * 1) 사용자 정보 - user\n     * 2) token - token\n     * 3) tokenType - access | refresh\n     * */\n\n    const user = await this.userService.getUserByEmail(result.email);\n    req.user = user;\n    req.token = token;\n    req.tokenType = result.type;\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'access') {\n      throw new UnauthorizedException('Access Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'refresh') {\n      throw new UnauthorizedException('Refresh Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestUser.html":{"url":"interfaces/RequestUser.html","title":"interface - RequestUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/request-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\n\nexport interface RequestUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayloadInterface.html":{"url":"interfaces/TokenPayloadInterface.html","title":"interface - TokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayloadInterface {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/inceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/inceptors/transform.interceptor.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// export const Info = {\n//   statusCode: 200,\n//   message: 'success',\n// };\n\nexport function createInfo(statusCode: number = 200) {\n  return {\n    statusCode,\n    message: 'success',\n  };\n}\n\nexport type Response = ReturnType & {\n  data: T;\n};\n\n// 성공시 던져주는 msg 형식\n// export type Response = typeof Info & {\n//   data: T;\n// };\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const res = context.switchToHttp().getResponse();\n    const status = res.statusCode;\n    return next\n      .handle()\n      .pipe(map((data) => Object.assign({}, createInfo(status), { data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAuthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateAuthDto } from './create-auth.dto';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                nickname\n                            \n                            \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: '유저 닉네임'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: '유저 패스워드'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto {\n  @ApiProperty({ required: false, description: '유저 패스워드' })\n  password?: string;\n\n  @ApiProperty({ required: false, description: '유저 닉네임' })\n  nickname?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    Public\n                                isVerified\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                nickname\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    \n                                    Public\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProviderEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ProviderEnum, default: undefined})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../common/base.entity';\nimport { BeforeInsert, Column, Entity } from 'typeorm';\nimport { ApiProperty, ApiTags } from '@nestjs/swagger';\nimport { ProviderEnum } from './provider.enum';\nimport * as bcrypt from 'bcryptjs';\nimport * as gravatar from 'gravatar';\nimport { InternalServerErrorException } from '@nestjs/common';\n\n@Entity()\n@ApiTags('UserEntity')\nexport class User extends BaseEntity {\n  // 유저 가입 이메일\n  @Column({\n    unique: true,\n  })\n  @ApiProperty()\n  public email: string;\n\n  // 유저 이름\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public name?: string;\n\n  // 유저 비밀번호\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public password?: string;\n\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public profileImg?: string;\n\n  @BeforeInsert()\n  async processUserCredentials() {\n    try {\n      if (ProviderEnum.LOCAL !== this.provider) {\n        return;\n      }\n      // 이메일 가입자 인 경우 기본 프로필 이미지 저장\n      this.profileImg = gravatar.url(this.email, {\n        s: '200',\n        r: 'pg',\n        d: 'mm',\n        protocol: 'https',\n      });\n    } catch (err) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async hashPassword(newPassword: string): Promise {\n    const saltValue = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(newPassword, saltValue);\n    return this.password;\n  }\n\n  // 유저 닉네임\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public nickname?: string;\n\n  // 유저 휴대폰번호\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public phone?: string;\n\n  // 유저 가입경로 [이메일, 구글, 카카오, 네이버]\n  @Column({\n    type: 'enum',\n    enum: ProviderEnum,\n    default: ProviderEnum.LOCAL,\n  })\n  @ApiProperty()\n  public provider: ProviderEnum;\n\n  @Column({\n    default: false,\n  })\n  public isVerified: boolean;\n\n  async checkPassword(inputPassword: string): Promise {\n    try {\n      return await bcrypt.compare(inputPassword, this.password);\n    } catch (err) {\n      console.log(err);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadProfileImg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestUser, updateUserDto: UpdateUserDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('update/profile/:id')@ApiOperation({summary: '유저 프로필 정보 수정'})@UseGuards(AccessTokenGuard)@UseInterceptors(undefined)@ApiCreatedResponse({description: '유저 프로필 수정'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadProfileImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadProfileImg(req: RequestUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('upload-profileImg')@ApiOperation({summary: '유저 프로필 이미지 업로드'})@UseInterceptors(undefined)@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Req,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { ApiCreatedResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { AccessTokenGuard } from '../auth/guard/bearer-token.guard';\nimport { RequestUser } from '../auth/interface/request-user.interface';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller('user')\n@ApiTags('User')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Post('upload-profileImg')\n  @ApiOperation({\n    summary: '유저 프로필 이미지 업로드',\n  })\n  @UseInterceptors(FileInterceptor('file'))\n  @UseGuards(AccessTokenGuard)\n  async uploadProfileImg(\n    @Req() req: RequestUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    const { user } = req;\n\n    const diskPath = file.path.replace(\n      this.configService.get('ATTACH_SAVE_PATH'),\n      '',\n    );\n\n    const imgInfo = {\n      fileName: file.originalname,\n      path: diskPath.replace(/\\\\/gi, '/'),\n      size: file.size,\n    };\n\n    // 프로필 이미지 업데이트\n    await this.userService.updateProfileImg(user.id, imgInfo.path);\n    return imgInfo;\n  }\n\n  @Post('update/profile/:id')\n  @ApiOperation({\n    summary: '유저 프로필 정보 수정',\n  })\n  @UseGuards(AccessTokenGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiCreatedResponse({ description: '유저 프로필 수정' })\n  async updateProfile(\n    @Req() req: RequestUser,\n    @Body() updateUserDto: UpdateUserDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    const { user } = req;\n\n    let imgPath: string;\n\n    /// 파일이 있는 경우\n    if (file) {\n      const diskPath = file.path.replace(\n        this.configService.get('ATTACH_SAVE_PATH'),\n        '',\n      );\n      imgPath = diskPath.replace(/\\\\/gi, '/');\n      /// 파일이 없는 경우\n    } else {\n      imgPath = user.profileImg;\n    }\n\n    return await this.userService.updateProfile(\n      user.id,\n      updateUserDto.password,\n      updateUserDto.nickname,\n      imgPath,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { format } from 'light-date';\nimport * as fs from 'fs';\nimport { extname } from 'path';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    AuthModule,\n    ConfigModule,\n    MulterModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        storage: diskStorage({\n          destination: function (req, file, cb) {\n            const dest = `${configService.get('ATTACH_SAVE_PATH')}/${format(new Date(), '{yyyy}{MM}/')}`;\n\n            if (!fs.existsSync(dest)) {\n              fs.mkdirSync(dest, {\n                recursive: true,\n              });\n            }\n            cb(null, dest);\n          },\n          filename(req, file, callback) {\n            const randomName = Array(32)\n              .fill(null)\n              .map(() => Math.round(Math.random() * 16).toString(16))\n              .join('');\n            return callback(null, `${randomName}${extname(file.originalname)}`);\n          },\n        }),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                changePasswordByEmail\n                            \n                            \n                                    Async\n                                createSocialUser\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserByNickname\n                            \n                            \n                                    Async\n                                findUserByPhone\n                            \n                            \n                                    Async\n                                findUserForPasswordReset\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                markIsVerify\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                            \n                                    Async\n                                updateProfileImg\n                            \n                            \n                                    Async\n                                validateEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePasswordByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswordByEmail(email: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSocialUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSocialUser(socialUserDto: CreateSocialUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socialUserDto\n                                            \n                                                            CreateSocialUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByNickname\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByNickname(nickname: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nickname\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByPhone\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserForPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserForPasswordReset(userInfo: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userInfo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:151\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markIsVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    markIsVerify(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(id: string, password?: string, nickname?: string, profileImg?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                nickname\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                profileImg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfileImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfileImg(userId: string, profileImg: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profileImg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ProviderEnum } from './entities/provider.enum';\nimport { CreateSocialUserDto } from './dto/create-social-user.dto';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  // 유저 생성\n  async createUser(createUserDto: CreateUserDto) {\n    // 1) nickname 중복이 없는지 확인\n    // exist() -> 만약에 조건에 해당되는 값이 있으면 true 반환\n    const nicknameExists = await this.userRepository.exists({\n      where: {\n        nickname: createUserDto.nickname,\n      },\n    });\n\n    if (nicknameExists) {\n      throw new BadRequestException('이미 존재하는 닉네임입니다!');\n    }\n\n    const emailExists = await this.userRepository.exists({\n      where: {\n        nickname: createUserDto.email,\n      },\n    });\n\n    if (emailExists) {\n      throw new BadRequestException('이미 존재하는 이메일입니다!');\n    }\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      provider: ProviderEnum.LOCAL,\n    });\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  async createSocialUser(socialUserDto: CreateSocialUserDto) {\n    const newUser = await this.userRepository.create(socialUserDto);\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  // 유저 이메일 유무 확인\n  async validateEmail(email: string) {\n    const existUser = await this.userRepository.findOneBy({ email });\n    if (!existUser) {\n      throw new NotFoundException('해당되는 유저 없습니다.');\n    }\n    return existUser;\n  }\n\n  // 유저 프로필 가져오기 [1명, by userId]\n  async getUser(userId: string) {\n    const existUser = await this.userRepository.findOneBy({\n      id: userId,\n    });\n\n    if (!existUser) {\n      throw new NotFoundException('해당되는 유저정보가 없습니다');\n    }\n\n    return existUser;\n  }\n\n  // 유저 찾기\n  async getUserByEmail(email: string) {\n    return await this.userRepository.findOne({\n      where: {\n        email,\n      },\n    });\n  }\n\n  // 유저 찾기\n  async findUserByEmail(email: string) {\n    const user = await this.userRepository.findOneBy({ email });\n    if (user) return user;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  async findUserByNickname(nickname: string) {\n    const user = await this.userRepository.findOneBy({ nickname });\n    if (user) return user.email;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  async findUserByPhone(phone: string) {\n    const user = await this.userRepository.findOneBy({ phone });\n    if (user) return user.email;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  async findUserForPasswordReset(userInfo: string) {\n    const emailUser = await this.findUserByEmail(userInfo);\n    console.log(emailUser);\n    if (!emailUser) {\n      const phoneUser = await this.findUserByPhone(userInfo);\n      if (!phoneUser) {\n        throw new NotFoundException('등록된 유저가 없습니다!');\n      }\n      return phoneUser;\n    }\n    return emailUser.email;\n  }\n\n  // 비밀번호 변경\n  async changePassword(userId: string, confirmPassword: string) {\n    const user = await this.userRepository.findOneBy({ id: userId });\n\n    const saltValue = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(confirmPassword, saltValue);\n\n    await this.userRepository.update(\n      { id: userId },\n      { password: user.password },\n    );\n    const updateUser = await this.userRepository.findOneBy({ id: userId });\n    return updateUser;\n  }\n\n  async changePasswordByEmail(email: string, confirmPassword: string) {\n    const user = await this.userRepository.findOneBy({ email });\n\n    const saltValue = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(confirmPassword, saltValue);\n\n    await this.userRepository.update({ email }, { password: user.password });\n    const updateUser = await this.userRepository.findOneBy({ email });\n    return updateUser;\n  }\n\n  // 유저 ID로 찾기\n  async getUserById(userId: string) {\n    const user = await this.userRepository.findOneBy({ id: userId });\n    if (user) return user;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  // 본인 인증 처리\n  async markIsVerify(email: string) {\n    const user = await this.findUserByEmail(email);\n    if (!user) {\n      throw new NotFoundException('유저를 찾을 수 없습니다!');\n    }\n    return await this.userRepository.update(\n      { email },\n      {\n        isVerified: true,\n      },\n    );\n  }\n\n  // 프로필 이미지 수정\n  async updateProfileImg(userId: string, profileImg: string) {\n    return await this.userRepository.update(\n      {\n        id: userId,\n      },\n      {\n        profileImg,\n      },\n    );\n  }\n\n  // 프로필 비밀번호, 닉네임, 이미지 수정\n  async updateProfile(\n    id: string,\n    password?: string,\n    nickname?: string,\n    profileImg?: string,\n  ) {\n    const user = await this.getUserById(id);\n\n    if (!user) {\n      throw new NotFoundException('유저가 없습니다!');\n    }\n\n    if (password) {\n      user.password = await user.hashPassword(password);\n    }\n\n    if (nickname) {\n      user.nickname = nickname;\n    }\n\n    if (profileImg) {\n      user.profileImg = profileImg;\n    }\n\n    const newUser = await this.userRepository.save(user);\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerifyPayloadInterface.html":{"url":"interfaces/VerifyPayloadInterface.html","title":"interface - VerifyPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerifyPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/verify-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerifyPayloadInterface {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                14 %\n                (3/21)\n            \n        \n        \n            \n                \n                src/auth/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/basic-token.guard.ts\n            \n            guard\n            BasicTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            guard\n            BearerTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/google-user.guard.ts\n            \n            injectable\n            GoogleUserGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local-user.guard.ts\n            \n            injectable\n            LocalUserGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/naver-user.guard.ts\n            \n            injectable\n            NaverUserGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interface/request-user.interface.ts\n            \n            interface\n            RequestUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interface/token-payload.interface.ts\n            \n            interface\n            TokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interface/verify-payload.interface.ts\n            \n            interface\n            VerifyPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/pipe/password.pipe.ts\n            \n            injectable\n            PasswordPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/stratges/google-user.strategy.ts\n            \n            injectable\n            GoogleUserStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/stratges/local-user.strategy.ts\n            \n            injectable\n            LocalUserStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/stratges/naver-user.strategy.ts\n            \n            injectable\n            NaverUserStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filter/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/inceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/inceptors/transform.interceptor.ts\n            \n            function\n            createInfo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.documents.ts\n            \n            class\n            BaseAPIDocument\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/create-social-user.dto.ts\n            \n            class\n            CreateSocialUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/17)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/cache-manager : ^2.2.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcryptjs : ^2.4.6\n        \n            @types/cookie-parser : ^1.4.6\n        \n            @types/gravatar : ^1.8.6\n        \n            @types/hapi__joi : ^17.1.14\n        \n            @types/multer : ^1.4.11\n        \n            @types/nodemailer : ^6.4.14\n        \n            @types/passport-google-oauth2 : ^0.1.8\n        \n            @types/passport-jwt : ^4.0.1\n        \n            @types/passport-local : ^1.0.38\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^5.4.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            gravatar : ^1.8.2\n        \n            light-date : ^1.2.0\n        \n            multer : ^1.4.5-lts.1\n        \n            nodemailer : ^6.9.9\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-naver : ^1.0.6\n        \n            pg : ^8.11.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ProviderEnum   (src/.../provider.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/entities/provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProviderEnum\n                    \n                \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 NAVER\n                            \n                        \n                        \n                            \n                                Value : naver\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createInfo   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/inceptors/transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createInfo\n                        \n                    \n                \n            \n            \n                \ncreateInfo(statusCode: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    200\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleUserStrategy\n\nGoogleUserStrategy\n\nAuthModule -->\n\nGoogleUserStrategy->AuthModule\n\n\n\n\n\nLocalUserStrategy\n\nLocalUserStrategy\n\nAuthModule -->\n\nLocalUserStrategy->AuthModule\n\n\n\n\n\nNaverUserStrategy\n\nNaverUserStrategy\n\nAuthModule -->\n\nNaverUserStrategy->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Response   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/inceptors/transform.interceptor.ts\n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
