var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.54,1,2.09]],["body/injectables/AccessTokenGuard.html",[0,0.815,1,2.427,2,1.009,3,0.172,4,0.152,5,0.152,6,2.864,7,1.799,8,1.947,9,3.408,10,0.377,11,1.249,12,2.15,13,3.718,14,3.718,15,3.784,16,0.581,17,2.858,18,0.955,19,0.021,20,0.81,21,0.458,22,0.768,23,1.799,24,0.856,25,2.736,26,0.442,27,2.864,28,0.458,29,2.333,30,1.546,31,2.064,32,1.799,33,0.296,34,0.014,35,1.546,36,1.272,37,2.108,38,1.649,39,2.318,40,2.665,41,3.382,42,2.626,43,1.963,44,2.489,45,2.064,46,3.784,47,1.799,48,2.41,49,2.168,50,2.269,51,2.168,52,1.799,53,1.663,54,1.557,55,1.963,56,1.963,57,2.168,58,3.163,59,3.163,60,2.168,61,1.963,62,2.168,63,3.735,64,2.168,65,1.557,66,3.163,67,2.168,68,1.663,69,2.168,70,0.012,71,0.012]],["title/modules/AppConfigModule.html",[72,1.199,73,2.261]],["body/modules/AppConfigModule.html",[3,0.233,4,0.206,5,0.206,19,0.021,26,0.521,28,0.623,33,0.233,34,0.011,70,0.015,71,0.015,72,1.726,73,3.252,74,1.729,75,3.884,76,3.884,77,3.319,78,2.26,79,1.628,80,2.102,81,3.884,82,3.884,83,3.884,84,3.884,85,6.189,86,3.319,87,3.884,88,7.292,89,3.884,90,3.884,91,3.884,92,3.884,93,2.946,94,3.884,95,3.884,96,3.884,97,2.946,98,3.884,99,3.319,100,3.884,101,2.667,102,3.884,103,3.884,104,3.884,105,2.667,106,3.884,107,3.884,108,3.884,109,3.884,110,3.884,111,3.884,112,3.884]],["title/controllers/AppController.html",[113,1.943,114,2.466]],["body/controllers/AppController.html",[3,0.281,4,0.248,5,0.248,10,0.616,11,1.743,16,0.951,19,0.021,24,1.4,26,0.523,28,0.75,33,0.281,34,0.013,38,1.849,65,1.478,70,0.017,71,0.017,113,3.15,114,3.999,115,2.53,116,3.995,117,5.67,118,2.081,119,4.676,120,1.743,121,3.689,122,3.995,123,2.944,124,4.676]],["title/modules/AppModule.html",[72,1.199,125,2.466]],["body/modules/AppModule.html",[3,0.206,4,0.182,5,0.182,19,0.021,26,0.608,28,0.55,33,0.206,34,0.01,70,0.014,71,0.014,72,1.819,73,4.02,74,1.527,80,2.57,114,3.741,115,2.57,121,3.715,122,2.931,125,4.914,126,1.856,127,2.16,128,2.16,129,1.856,130,3.429,131,2.16,132,2.931,133,2.931,134,2.931,135,4.02,136,3.715,137,3.715,138,3.715,139,2.99,140,2.16,141,2.16,142,3.431,143,4.058,144,3.431,145,3.431,146,3.431,147,2.931,148,2.764,149,2.931,150,2.931,151,2.931]],["title/injectables/AppService.html",[0,0.54,121,2.09]],["body/injectables/AppService.html",[0,0.901,2,1.728,3,0.294,4,0.26,5,0.26,10,0.645,11,1.793,16,0.996,19,0.021,24,1.466,26,0.439,28,0.785,33,0.294,34,0.014,65,1.548,70,0.017,71,0.017,117,5.761,120,1.793,121,3.485,152,4.183,153,4.896,154,4.896,155,4.896]],["title/classes/Auth.html",[34,0.01,156,2.261]],["body/classes/Auth.html",[3,0.329,4,0.291,5,0.291,19,0.019,33,0.329,34,0.015,70,0.018,71,0.018,156,4.034,157,2.167,158,4.682]],["title/controllers/AuthController.html",[113,1.943,159,2.466]],["body/controllers/AuthController.html",[3,0.073,4,0.065,5,0.065,10,0.161,11,0.631,12,2.509,16,1.113,18,1.736,19,0.022,20,1.515,21,0.833,22,1.396,24,1.639,26,0.452,28,0.196,29,1.317,30,0.66,33,0.073,34,0.003,38,0.482,39,2.044,40,2.371,42,2.573,46,3.364,47,1.75,48,1.663,50,2.032,53,0.71,54,1.046,65,1.73,68,0.71,70,0.006,71,0.006,113,0.66,115,0.66,118,2.436,120,1.929,123,0.768,156,0.768,159,1.447,160,1.042,161,1.042,162,2.108,163,2.107,164,2.107,165,1.8,166,3.309,167,2.107,168,2.107,169,3.309,170,2.107,171,2.107,172,2.78,173,2.107,174,2.107,175,1.22,176,3.181,177,2.107,178,2.107,179,1.22,180,1.836,181,4.052,182,1.22,183,1.22,184,2.827,185,1.22,186,1.22,187,1.22,188,2.827,189,1.22,190,1.042,191,1.22,192,1.22,193,2.833,194,1.8,195,1.75,196,1.22,197,1.22,198,1.22,199,1.22,200,1.22,201,2.758,202,1.22,203,1.22,204,1.22,205,1.22,206,1.22,207,1.22,208,1.22,209,1.22,210,1.22,211,1.22,212,1.22,213,2.573,214,1.22,215,1.22,216,1.22,217,3.309,218,1.22,219,2.107,220,2.107,221,1.22,222,1.22,223,2.107,224,1.22,225,1.8,226,1.22,227,1.22,228,1.22,229,1.8,230,1.22,231,0.925,232,1.22,233,1.042,234,1.042,235,1.8,236,4.676,237,2.107,238,0.925,239,0.511,240,1.22,241,0.925,242,0.838,243,1.22,244,1.8,245,1.22,246,0.838,247,1.22,248,2.107,249,1.22,250,1.042,251,1.22,252,1.22,253,0.838,254,1.22,255,1.22,256,1.22,257,1.22,258,2.107,259,4.565,260,1.22,261,3.309,262,2.107,263,1.447,264,1.22,265,1.22,266,1.22,267,1.22,268,1.22,269,2.107,270,1.22,271,1.22,272,1.22,273,1.8,274,1.22,275,1.22,276,1.22,277,1.447,278,1.22,279,1.22,280,1.22,281,1.22,282,1.22,283,2.107,284,2.107,285,1.22,286,1.22,287,2.107,288,1.22,289,2.107,290,1.22,291,1.22,292,1.566,293,1.22,294,1.22,295,1.22,296,1.22,297,1.22,298,1.22,299,1.22,300,1.22,301,1.22,302,1.22,303,1.042,304,1.22]],["title/modules/AuthModule.html",[72,1.199,148,2.09]],["body/modules/AuthModule.html",[3,0.19,4,0.168,5,0.168,19,0.021,26,0.612,28,0.508,29,3.263,30,1.713,33,0.19,34,0.009,70,0.013,71,0.013,72,1.742,74,1.409,78,2.612,79,1.327,80,2.429,115,2.429,126,1.713,127,1.993,128,1.993,129,1.713,130,3.284,131,3.284,136,3.621,137,3.621,138,2.612,139,2.826,140,1.993,141,1.993,143,3.836,147,2.705,148,4.139,150,2.705,151,2.705,159,3.582,305,2.705,306,3.166,307,2.705,308,2.705,309,3.918,310,3.918,311,3.918,312,3.166,313,3.166,314,3.166,315,5.216,316,3.166,317,2.705,318,3.166,319,3.166,320,3.166]],["title/classes/BaseAPIDocument.html",[34,0.01,321,2.724]],["body/classes/BaseAPIDocument.html",[3,0.266,4,0.235,5,0.235,10,0.583,11,1.683,16,1.144,19,0.021,24,1.324,26,0.397,33,0.266,34,0.012,45,2.357,65,1.399,70,0.016,71,0.016,157,1.749,239,1.854,321,4.264,322,3.779,323,1.985,324,5.205,325,6.182,326,6.505,327,2.785,328,2.574,329,6.182,330,4.424,331,4.424,332,4.424,333,4.424,334,4.424,335,5.623,336,4.424,337,4.424,338,4.424,339,4.424]],["title/classes/BaseEntity.html",[34,0.01,340,2.466]],["body/classes/BaseEntity.html",[3,0.241,4,0.213,5,0.213,10,0.528,16,1.274,19,0.021,21,1.004,26,0.36,33,0.241,34,0.011,70,0.015,71,0.015,118,2.788,120,1.579,157,1.584,323,1.862,324,5.431,340,3.622,341,3.423,342,5.896,343,5.896,344,5.037,345,5.896,346,5.069,347,5.896,348,4.006,349,5.896,350,4.006,351,5.274,352,4.006,353,5.896,354,4.006,355,4.006,356,2.751,357,4.006]],["title/guards/BasicTokenGuard.html",[242,2.466,358,2.724]],["body/guards/BasicTokenGuard.html",[0,0.747,3,0.22,4,0.195,5,0.195,7,2.305,10,0.482,11,1.487,12,2.104,13,4.149,14,3.41,15,3.803,16,1.01,18,1.659,19,0.021,20,1.408,21,0.796,22,1.333,23,2.305,24,1.096,25,2.509,26,0.446,27,3.41,28,0.587,29,3.084,30,1.981,33,0.22,34,0.01,35,1.981,36,1.629,38,1.447,39,2.358,40,1.981,41,2.514,42,3.126,43,2.514,44,1.85,45,1.534,46,2.305,47,2.305,48,1.629,50,1.534,54,1.57,61,2.514,65,1.158,70,0.014,71,0.014,123,2.305,180,2.081,242,3.41,263,2.514,273,3.128,292,2.081,359,2.777,360,4.814,361,2.777,362,3.661,363,3.661,364,3.661]],["title/guards/BearerTokenGuard.html",[9,2.261,358,2.724]],["body/guards/BearerTokenGuard.html",[0,0.801,1,1.603,3,0.166,4,0.146,5,0.146,6,3.311,7,1.734,8,1.605,9,3.349,10,0.363,11,1.216,12,2.118,13,3.654,14,3.654,15,3.735,16,0.826,18,1.356,19,0.021,20,1.151,21,0.651,22,1.09,23,1.734,24,0.825,25,2.689,26,0.433,27,2.788,28,0.442,29,2.811,30,1.491,31,2.572,32,1.734,33,0.29,34,0.014,35,1.491,36,1.807,37,2.052,38,1.605,39,2.291,40,2.609,41,3.311,42,2.556,43,1.892,44,2.437,45,2.021,46,3.735,47,1.734,48,2.368,49,2.09,50,2.23,51,2.09,52,1.734,53,1.603,54,1.524,55,1.892,56,1.892,57,2.09,58,3.079,59,3.079,60,2.09,61,1.892,62,2.09,63,3.657,64,2.09,65,1.524,66,3.079,67,2.09,68,1.603,69,2.09,70,0.012,71,0.012,359,2.09,361,2.09,365,2.755,366,2.755]],["title/classes/ChangePasswordDto.html",[34,0.01,176,2.466]],["body/classes/ChangePasswordDto.html",[3,0.264,4,0.233,5,0.233,10,0.578,16,1.253,19,0.021,21,0.987,26,0.394,33,0.264,34,0.012,70,0.016,71,0.016,118,2.741,120,2.051,157,1.735,162,4.671,176,3.842,239,1.84,292,2.582,323,1.975,367,5.541,368,3.75,369,5.262,370,4.05,371,4.39,372,4.39,373,4.39]],["title/classes/CreateAuthDto.html",[34,0.01,374,2.466]],["body/classes/CreateAuthDto.html",[3,0.328,4,0.29,5,0.29,19,0.019,33,0.328,34,0.015,70,0.018,71,0.018,157,2.156,374,4.388,375,4.66,376,4.136]],["title/classes/CreateSocialUserDto.html",[34,0.01,377,2.466]],["body/classes/CreateSocialUserDto.html",[3,0.211,4,0.186,5,0.186,10,0.462,16,1.265,19,0.021,20,1.562,21,0.997,22,1.726,26,0.494,33,0.211,34,0.014,70,0.014,71,0.014,118,2.768,120,2.008,157,1.386,180,2.309,239,1.469,292,2.309,323,1.701,327,2.206,328,2.039,370,3.831,377,3.31,378,4.874,379,4.874,380,2.206,381,3.205,382,3.205,383,3.505,384,3.505,385,3.505,386,3.505,387,3.505,388,3.505,389,3.505,390,2.784,391,3.31,392,3.505,393,3.505,394,4.82,395,4.82,396,5.933,397,3.505,398,2.994,399,2.658,400,3.505]],["title/classes/CreateUserDto.html",[34,0.01,213,2.261]],["body/classes/CreateUserDto.html",[3,0.203,4,0.18,5,0.18,10,0.445,16,1.293,19,0.021,20,1.532,21,1.019,22,1.262,26,0.485,33,0.203,34,0.009,70,0.013,71,0.013,118,2.829,120,2.047,157,1.337,180,2.265,213,2.959,239,1.417,292,2.265,323,1.66,327,2.128,328,1.967,370,4.086,378,4.945,380,2.128,382,3.145,390,2.731,391,3.228,399,2.564,401,3.712,402,4.099,403,2.564,404,3.381,405,3.381,406,3.381,407,3.381,408,3.381,409,2.321,410,3.381]],["title/modules/DatabaseModule.html",[72,1.199,135,2.261]],["body/modules/DatabaseModule.html",[3,0.263,4,0.232,5,0.232,19,0.021,21,0.701,26,0.552,28,0.701,33,0.263,34,0.012,48,2.484,70,0.016,71,0.016,72,1.864,74,1.946,78,3.248,79,1.833,80,3.02,86,3.736,135,3.514,292,1.833,411,4.373,412,3.736,413,3.003,414,3.504,415,4.373,416,3.316,417,3.316,418,3.316,419,4.373,420,3.736,421,4.373,422,4.373,423,4.373,424,4.373,425,4.373,426,4.373,427,3.316,428,4.373,429,4.373,430,4.373,431,4.373]],["title/modules/EmailModule.html",[72,1.199,136,2.09]],["body/modules/EmailModule.html",[3,0.261,4,0.231,5,0.231,19,0.021,26,0.55,28,0.696,33,0.261,34,0.012,70,0.016,71,0.016,72,2.046,74,1.932,78,3.232,79,1.819,80,2.348,126,2.348,127,2.732,128,2.732,129,2.348,130,3.857,131,3.857,136,4.04,139,3.497,140,2.732,141,2.732,432,3.708,433,3.708,434,3.708,435,4.561,436,4.34,437,4.34]],["title/injectables/EmailService.html",[0,0.54,435,2.261]],["body/injectables/EmailService.html",[0,0.772,2,1.357,3,0.231,4,0.204,5,0.204,10,0.507,11,1.537,16,1.175,18,1.714,19,0.021,20,1.455,21,0.926,22,1.378,24,1.151,26,0.553,28,0.616,33,0.231,34,0.011,36,1.711,37,2.919,38,1.52,54,1.216,65,1.216,70,0.015,71,0.015,79,1.612,123,2.421,156,2.421,323,1.812,414,3.574,435,3.231,438,3.285,439,5.777,440,5.132,441,2.916,442,5.132,443,5.132,444,5.777,445,3.845,446,3.845,447,5.777,448,3.845,449,5.132,450,3.285,451,3.845,452,3.845,453,3.845,454,3.845,455,3.845,456,3.845,457,3.845]],["title/injectables/GoogleUserGuard.html",[0,0.54,246,2.466]],["body/injectables/GoogleUserGuard.html",[0,0.911,2,1.758,3,0.299,4,0.265,5,0.265,8,2.393,19,0.021,26,0.585,28,0.798,33,0.299,34,0.014,70,0.017,71,0.017,246,4.157,390,2.517,458,4.255,459,3.42,460,6.053,461,3.777,462,2.695,463,3.777]],["title/injectables/GoogleUserStrategy.html",[0,0.54,309,2.261]],["body/injectables/GoogleUserStrategy.html",[0,0.643,2,1.043,3,0.178,4,0.157,5,0.157,8,1.689,10,0.389,11,1.279,12,1.874,16,0.869,18,1.427,19,0.021,20,1.423,21,0.685,22,1.147,24,0.884,25,2.159,26,0.524,28,0.474,31,2.628,32,1.859,33,0.178,34,0.008,36,1.901,37,2.159,38,1.168,39,1.874,44,1.493,45,1.238,50,1.791,54,1.351,70,0.012,71,0.012,79,1.238,101,2.029,120,1.821,180,2.103,231,2.24,277,2.934,309,2.689,381,1.719,382,3.199,414,3.29,441,2.24,462,1.598,464,4.288,465,2.029,466,3.24,467,3.806,468,2.24,469,2.954,470,5.019,471,5.195,472,4.288,473,5.499,474,2.524,475,4.272,476,2.24,477,2.24,478,2.24,479,2.029,480,2.524,481,2.24,482,2.524,483,2.954,484,2.524,485,2.954,486,2.524,487,2.954,488,2.954,489,4.288,490,3.65,491,4.272,492,2.24,493,2.524,494,2.524,495,2.524,496,2.954,497,2.954,498,2.029,499,2.24,500,2.954,501,2.954,502,2.524]],["title/classes/HttpExceptionFilter.html",[34,0.01,503,2.724]],["body/classes/HttpExceptionFilter.html",[3,0.216,4,0.191,5,0.191,10,0.473,11,1.468,16,0.731,18,1.2,19,0.021,20,1.019,21,0.576,22,0.965,24,1.076,26,0.44,28,0.576,33,0.216,34,0.01,35,2.652,39,2.343,45,2.055,52,3.086,70,0.014,71,0.014,120,1.879,157,1.42,418,4.232,476,2.724,498,3.832,503,3.718,504,4.188,505,3.069,506,5.58,507,4.902,508,5.995,509,3.592,510,3.592,511,3.718,512,2.467,513,3.592,514,3.592,515,3.592,516,3.592,517,3.592,518,4.767,519,3.592,520,5.995,521,3.592,522,4.232,523,2.724,524,4.767,525,3.069,526,4.902,527,4.902,528,4.902,529,4.188,530,4.902,531,3.592]],["title/injectables/LocalUserGuard.html",[0,0.54,532,2.724]],["body/injectables/LocalUserGuard.html",[0,0.911,2,1.758,3,0.299,4,0.265,5,0.265,8,2.393,19,0.021,26,0.585,28,0.798,33,0.299,34,0.014,70,0.017,71,0.017,390,2.517,459,3.42,461,3.777,462,2.695,463,3.777,532,4.591,533,4.255,534,6.053]],["title/injectables/LocalUserStrategy.html",[0,0.54,310,2.261]],["body/injectables/LocalUserStrategy.html",[0,0.747,2,1.292,3,0.22,4,0.195,5,0.195,8,1.963,10,0.482,11,1.487,12,2.104,16,1.01,18,1.659,19,0.021,20,1.408,21,0.796,22,1.333,24,1.096,25,2.509,26,0.567,28,0.587,29,3.084,30,1.981,33,0.22,34,0.01,36,1.629,38,1.447,50,1.534,54,1.158,65,1.158,70,0.014,71,0.014,120,1.95,123,2.305,180,2.532,292,2.532,303,3.128,310,3.126,361,2.777,462,1.981,465,2.514,466,3.766,467,3.766,468,2.777,477,2.777,478,2.777,479,2.514,481,2.777,535,4.814,536,4.966,537,3.661,538,2.777,539,3.128,540,3.661]],["title/classes/LoginUserDto.html",[34,0.01,541,2.724]],["body/classes/LoginUserDto.html",[3,0.279,4,0.246,5,0.246,10,0.611,16,1.179,19,0.021,21,0.929,26,0.416,33,0.279,34,0.013,70,0.017,71,0.017,118,2.578,120,1.981,157,1.834,180,2.648,239,1.944,292,2.648,323,2.045,370,3.963,380,2.92,403,3.518,541,4.394,542,5.397,543,3.963]],["title/injectables/NaverUserGuard.html",[0,0.54,253,2.466]],["body/injectables/NaverUserGuard.html",[0,0.911,2,1.758,3,0.299,4,0.265,5,0.265,8,2.393,19,0.021,26,0.585,28,0.798,33,0.299,34,0.014,70,0.017,71,0.017,253,4.157,390,2.517,459,3.42,461,3.777,462,2.695,463,3.777,544,4.255,545,6.053]],["title/injectables/NaverUserStrategy.html",[0,0.54,311,2.261]],["body/injectables/NaverUserStrategy.html",[0,0.639,2,1.035,3,0.176,4,0.156,5,0.156,8,1.68,10,0.386,11,1.272,12,1.866,16,0.864,18,1.419,19,0.021,20,1.417,21,0.681,22,1.141,24,0.878,25,2.147,26,0.522,28,0.47,31,2.622,32,1.845,33,0.176,34,0.008,36,1.891,37,2.147,38,1.68,39,2.046,50,1.781,54,1.343,70,0.012,71,0.012,79,1.229,105,2.013,120,1.816,180,1.781,184,3.63,188,4.269,277,2.917,311,2.674,381,1.706,382,3.384,414,3.281,441,2.223,462,1.586,465,2.013,466,3.222,467,3.789,468,2.223,471,5.182,472,4.269,474,2.504,477,2.223,478,2.223,479,2.013,481,2.223,482,2.504,484,2.504,486,2.504,489,4.681,490,3.63,492,2.223,493,2.504,494,2.504,498,2.013,499,2.223,502,2.504,546,4.269,547,2.931,548,2.931,549,2.931,550,2.931,551,4.248,552,2.931]],["title/injectables/PasswordPipe.html",[0,0.54,409,2.466]],["body/injectables/PasswordPipe.html",[0,0.846,2,1.562,3,0.266,4,0.235,5,0.235,10,0.583,11,1.683,16,0.9,18,1.478,19,0.021,20,1.254,21,0.709,22,1.188,24,1.324,26,0.397,28,0.709,33,0.266,34,0.012,35,2.393,44,2.235,45,1.854,65,1.399,70,0.016,71,0.016,328,2.574,409,3.861,553,3.779,554,5.623,555,5.623,556,5.281,557,6.505,558,4.424,559,5.623,560,4.804,561,4.424,562,5.623,563,4.424]],["title/modules/RedisModule.html",[72,1.199,137,2.09]],["body/modules/RedisModule.html",[3,0.264,4,0.233,5,0.233,12,1.639,19,0.021,26,0.582,28,0.704,33,0.264,34,0.012,48,1.954,70,0.016,71,0.016,72,1.869,74,1.954,78,3.256,79,1.84,80,3.027,93,3.329,137,3.256,414,3.509,416,3.329,417,3.329,418,3.329,420,3.75,564,4.39,565,4.39,566,3.75,567,4.78,568,5.596,569,3.75,570,4.78,571,4.39,572,4.39,573,4.39,574,4.39,575,4.39,576,4.39]],["title/injectables/RefreshTokenGuard.html",[0,0.54,68,2.09]],["body/injectables/RefreshTokenGuard.html",[0,0.815,1,1.663,2,1.009,3,0.172,4,0.152,5,0.152,6,2.864,7,1.799,8,1.947,9,3.408,10,0.377,11,1.249,12,2.15,13,3.718,14,3.718,15,3.784,16,0.581,18,0.955,19,0.021,20,0.81,21,0.458,22,0.768,23,1.799,24,0.856,25,2.736,26,0.442,27,2.864,28,0.458,29,2.333,30,1.546,31,2.064,32,1.799,33,0.296,34,0.014,35,1.546,36,1.272,37,2.108,38,1.649,39,2.318,40,2.665,41,3.382,42,2.626,43,1.963,44,2.489,45,2.064,46,3.784,47,1.799,48,2.41,49,2.168,50,2.269,51,2.168,52,1.799,53,1.663,54,1.557,55,1.963,56,1.963,57,2.168,58,3.163,59,3.163,60,2.168,61,1.963,62,2.168,63,3.735,64,2.168,65,1.557,66,3.163,67,2.168,68,2.427,69,2.168,70,0.012,71,0.012,577,2.858]],["title/interfaces/RequestUser.html",[201,2.261,578,1.943]],["body/interfaces/RequestUser.html",[3,0.297,4,0.262,5,0.262,8,2.381,10,0.651,19,0.02,21,0.792,26,0.443,33,0.297,52,3.79,54,2.279,70,0.017,71,0.017,201,3.79,323,2.126,539,4.219,578,2.671,579,3.391,580,4.219,581,4.219]],["title/interfaces/TokenPayloadInterface.html",[578,1.943,582,2.724]],["body/interfaces/TokenPayloadInterface.html",[3,0.309,4,0.273,5,0.273,10,0.677,19,0.02,21,0.823,33,0.309,70,0.018,71,0.018,120,1.979,193,5.198,323,2.177,578,2.779,579,3.527,582,4.677,583,4.389,584,3.896]],["title/injectables/TransformInterceptor.html",[0,0.54,585,2.724]],["body/injectables/TransformInterceptor.html",[0,0.709,2,1.197,3,0.325,4,0.18,5,0.18,10,0.447,11,1.41,15,3.682,16,0.69,18,1.132,19,0.022,20,0.961,21,0.868,22,0.91,23,2.965,24,1.015,26,0.486,28,0.544,33,0.369,34,0.01,35,1.834,39,2.021,65,1.489,70,0.014,71,0.014,511,3.573,518,2.897,522,3.573,523,2.571,524,4.025,525,2.897,529,4.625,585,3.573,586,2.328,587,5.413,588,3.391,589,5.85,590,5.85,591,3.391,592,5.413,593,4.711,594,2.897,595,2.897,596,3.391,597,3.573,598,4.711,599,2.571,600,2.897,601,3.391,602,4.711,603,3.391,604,3.391,605,3.391,606,3.391,607,3.391,608,3.391,609,3.391,610,3.391]],["title/classes/UpdateAuthDto.html",[34,0.01,611,2.724]],["body/classes/UpdateAuthDto.html",[3,0.306,4,0.271,5,0.271,8,2.425,19,0.021,26,0.551,33,0.306,34,0.014,70,0.018,71,0.018,157,2.013,239,2.134,374,3.496,376,3.861,611,4.652,612,4.35,613,6.134,614,5.091,615,5.091,616,5.091]],["title/classes/UpdateUserDto.html",[34,0.01,617,2.466]],["body/classes/UpdateUserDto.html",[3,0.254,4,0.225,5,0.225,10,0.557,16,1.111,19,0.021,21,0.876,22,1.717,26,0.379,33,0.254,34,0.012,70,0.016,71,0.016,118,2.431,120,1.915,157,1.672,194,4.667,195,4.026,239,1.772,263,4.392,292,2.536,323,1.928,370,3.521,380,2.661,401,4.155,403,3.206,543,3.612,617,3.751,618,5.17,619,5.462]],["title/entities/User.html",[54,1.135,620,2.724]],["body/entities/User.html",[3,0.127,4,0.112,5,0.112,8,0.835,10,0.278,12,1.528,16,1.178,19,0.022,20,1.161,21,0.955,22,1.637,25,1.675,26,0.502,28,0.338,33,0.127,34,0.006,39,0.788,44,1.675,45,1.389,48,2.38,50,1.716,54,1.048,65,1.294,70,0.01,71,0.01,118,2.578,120,1.942,180,1.716,238,1.601,239,0.885,263,2.277,292,1.716,323,1.17,324,5.268,327,2.577,340,2.277,356,1.45,370,3.37,381,2.382,382,2.382,390,2.547,391,2.277,401,2.811,402,3.104,427,1.601,492,2.514,498,2.277,499,2.514,597,1.601,620,2.514,621,1.804,622,3.497,623,2.111,624,5.349,625,2.111,626,3.315,627,2.111,628,2.111,629,5.039,630,2.111,631,2.111,632,2.111,633,2.111,634,2.111,635,2.111,636,4.637,637,2.111,638,2.111,639,2.111,640,3.315,641,5.958,642,2.111,643,1.804,644,1.601,645,2.832,646,4.093,647,2.111,648,2.111,649,5.039,650,2.111,651,2.111,652,2.111,653,2.111,654,2.111,655,2.111,656,1.804,657,2.111,658,2.111,659,2.111,660,2.111,661,2.111,662,2.832,663,1.804,664,4.093,665,2.111,666,2.111,667,2.111,668,2.111]],["title/controllers/UserController.html",[113,1.943,669,2.466]],["body/controllers/UserController.html",[1,1.416,3,0.146,4,0.129,5,0.313,10,0.321,11,1.108,12,2.116,16,0.753,18,1.236,19,0.022,20,1.049,21,0.593,22,0.994,24,1.108,26,0.545,28,0.39,31,1.876,33,0.146,34,0.007,36,1.083,37,1.87,38,1.463,39,2.116,40,3.363,50,1.551,54,1.415,65,1.17,70,0.011,71,0.011,79,1.02,113,1.317,115,1.317,118,1.647,161,2.079,181,2.806,195,1.532,201,3.707,229,3.161,233,2.079,234,2.079,235,3.161,236,3.825,238,1.846,239,1.02,241,1.846,244,2.079,250,2.079,259,3.161,381,1.416,414,2.422,512,1.671,617,4.044,669,2.541,670,2.079,671,3.825,672,4.477,673,2.434,674,5.666,675,2.434,676,2.434,677,2.434,678,2.079,679,2.434,680,3.7,681,2.434,682,2.434,683,2.434,684,4.477,685,2.434,686,2.079,687,2.434,688,1.846,689,2.434,690,2.434,691,2.434,692,2.434,693,2.434,694,3.7,695,3.7,696,3.7,697,3.7,698,3.7,699,4.477,700,3.7,701,3.7,702,3.161,703,3.7,704,3.7,705,3.7,706,2.434,707,3.7,708,2.434,709,2.079,710,2.434,711,2.434,712,2.434,713,2.434]],["title/modules/UserModule.html",[72,1.199,138,2.09]],["body/modules/UserModule.html",[3,0.178,4,0.158,5,0.267,12,1.109,19,0.021,26,0.611,28,0.476,31,2.853,33,0.178,34,0.008,39,1.601,40,1.606,48,1.322,54,0.939,65,0.939,70,0.012,71,0.012,72,1.681,74,1.322,78,2.929,79,1.245,80,2.723,97,2.252,115,2.32,126,1.606,127,1.869,128,1.869,129,1.606,130,3.168,131,3.168,138,3.812,139,2.699,140,1.869,141,1.869,148,3.544,149,2.537,346,3.252,412,2.537,413,2.039,414,2.982,416,2.252,417,2.252,512,2.039,595,2.537,599,2.252,669,3.456,686,2.537,688,2.252,702,2.537,714,2.537,715,2.537,716,2.537,717,2.969,718,2.969,719,2.969,720,2.537,721,2.969,722,4.288,723,2.969,724,2.537,725,4.288,726,2.969,727,2.969,728,2.969,729,2.969,730,2.969,731,2.969,732,4.288,733,2.969,734,2.969,735,2.969,736,2.969,737,2.969,738,2.969,739,2.969,740,2.969,741,2.969,742,2.969,743,2.969,744,2.969,745,2.969,746,2.537,747,2.969,748,2.969]],["title/injectables/UserService.html",[0,0.54,31,1.505]],["body/injectables/UserService.html",[0,0.286,2,0.383,3,0.065,4,0.058,5,0.058,10,0.143,11,0.57,12,2.536,16,1.136,18,1.865,19,0.022,20,1.583,21,0.895,22,1.499,24,1.642,26,0.393,28,0.174,31,0.798,33,0.065,34,0.003,36,0.847,37,0.549,38,0.429,39,2.232,44,2.507,45,2.079,48,0.847,50,2.687,53,1.108,54,1.795,65,1.765,70,0.005,71,0.005,120,2.086,162,1.444,165,1.626,180,2.143,181,4.158,190,1.626,193,3.762,213,2.407,225,0.928,231,0.824,241,1.444,277,2.626,292,1.603,344,3.927,356,0.746,369,3.267,377,2.097,379,0.824,381,2.675,382,0.632,390,0.549,391,0.746,399,0.824,401,3.289,402,1.444,413,0.746,476,0.824,495,2.609,560,2.172,622,0.928,643,0.928,644,0.824,662,2.609,663,1.626,671,2.172,678,2.172,709,0.928,720,0.928,749,0.928,750,1.904,751,1.904,752,1.904,753,1.904,754,1.904,755,1.904,756,1.904,757,1.904,758,1.904,759,1.904,760,1.904,761,1.904,762,1.086,763,2.609,764,1.086,765,1.904,766,1.904,767,1.086,768,1.904,769,1.086,770,1.904,771,1.086,772,1.086,773,1.904,774,1.086,775,1.904,776,1.086,777,1.904,778,1.086,779,1.904,780,1.086,781,1.904,782,1.086,783,1.086,784,1.904,785,1.086,786,1.904,787,1.086,788,1.904,789,1.086,790,1.086,791,1.086,792,1.904,793,1.086,794,1.904,795,1.086,796,3.824,797,1.086,798,1.904,799,1.086,800,1.086,801,1.904,802,1.904,803,1.086,804,1.904,805,1.086,806,1.086,807,1.904,808,1.086,809,3.824,810,4.79,811,1.086,812,3.054,813,3.054,814,1.904,815,1.904,816,1.086,817,1.086,818,2.542,819,1.086,820,1.086,821,3.474,822,1.904,823,3.054,824,3.054,825,1.086,826,1.086,827,1.086,828,1.086,829,1.086]],["title/interfaces/VerifyPayloadInterface.html",[578,1.943,830,2.724]],["body/interfaces/VerifyPayloadInterface.html",[3,0.309,4,0.273,5,0.273,10,0.677,19,0.02,21,0.823,33,0.309,70,0.018,71,0.018,120,1.979,180,2.873,323,2.177,578,2.779,579,3.527,584,3.896,830,4.677,831,4.389]],["title/coverage.html",[832,3.717]],["body/coverage.html",[0,1.013,1,1.476,5,0.135,6,3.152,7,3.215,9,1.596,19,0.021,21,0.407,29,1.201,31,1.063,34,0.019,45,1.063,54,1.207,68,1.476,70,0.011,71,0.011,113,2.483,114,1.741,116,2.167,121,1.476,129,1.372,152,2.167,156,1.596,158,2.167,159,1.741,160,2.167,176,1.741,201,1.596,213,1.596,242,1.741,246,1.741,253,1.741,309,1.596,310,1.596,311,1.596,321,1.923,322,2.167,340,1.741,341,2.167,358,2.895,360,2.167,367,2.167,368,2.167,374,1.741,375,2.167,376,2.895,377,1.741,378,2.895,379,1.923,380,3.215,409,1.741,435,1.596,438,2.167,458,2.167,459,3.152,464,2.167,465,3.152,503,1.923,504,2.167,505,2.167,532,1.923,533,2.167,535,2.167,541,1.923,542,2.167,544,2.167,546,2.167,553,2.167,578,2.483,580,2.167,581,2.167,582,1.923,583,2.167,584,2.895,585,1.923,586,2.621,599,2.895,611,1.923,612,2.167,617,1.741,618,2.167,620,1.923,621,3.261,669,1.741,670,2.167,749,2.167,830,1.923,831,2.167,832,1.923,833,2.536,834,2.536,835,2.536,836,7.3,837,6.406,838,2.536,839,2.536,840,2.167,841,2.536,842,3.817,843,6.288,844,6.288,845,2.536,846,2.167,847,2.167,848,2.536,849,2.536,850,2.536,851,2.536,852,2.536,853,2.536]],["title/dependencies.html",[126,2.337,854,2.562]],["body/dependencies.html",[19,0.021,28,0.542,34,0.013,70,0.013,71,0.013,77,2.888,79,1.417,93,2.564,97,2.564,99,4.016,101,3.228,105,2.321,126,1.829,239,1.417,317,2.888,346,2.564,356,2.321,398,2.888,413,2.321,450,2.888,462,1.829,479,4.216,480,4.016,512,2.321,538,3.565,556,2.888,566,2.888,567,4.617,569,4.016,570,2.888,594,2.888,644,2.564,645,2.888,656,2.888,688,2.564,724,2.888,855,3.381,856,3.381,857,3.381,858,3.381,859,5.405,860,3.381,861,3.381,862,3.381,863,3.381,864,3.381,865,3.381,866,3.381,867,3.381,868,3.381,869,4.701,870,4.701,871,3.381,872,3.381,873,3.381,874,3.381,875,3.381,876,3.381,877,3.381,878,3.381,879,5.405,880,3.381,881,4.701,882,3.381,883,3.381,884,3.381,885,3.381,886,3.381,887,3.381,888,3.381,889,3.381,890,3.381,891,3.381,892,3.381,893,3.381,894,3.381,895,3.381,896,3.381,897,3.381,898,3.381,899,3.381,900,3.381,901,3.381,902,3.381,903,3.381]],["title/miscellaneous/enumerations.html",[904,1.745,905,3.69]],["body/miscellaneous/enumerations.html",[10,0.68,19,0.02,70,0.018,71,0.018,101,4.246,105,4.246,328,3.994,390,3.125,538,4.69,904,3.002,905,4.408,906,5.16,907,5.16,908,6.184]],["title/miscellaneous/functions.html",[904,1.745,909,3.69]],["body/miscellaneous/functions.html",[10,0.677,18,1.716,19,0.019,20,1.457,21,0.823,22,1.379,70,0.018,71,0.018,129,3.576,327,3.234,328,2.989,522,3.896,523,4.677,586,3.527,597,3.896,600,4.389,846,5.269,847,4.389,904,2.989,909,4.389,910,5.137,911,4.389]],["title/index.html",[10,0.395,912,2.999,913,2.999]],["body/index.html",[4,0.207,19,0.021,70,0.015,71,0.015,195,2.453,746,3.33,763,3.33,832,2.956,914,3.898,915,3.898,916,5.179,917,3.898,918,3.898,919,3.898,920,3.898,921,3.898,922,3.898,923,5.816,924,3.898,925,3.898,926,3.898,927,5.816,928,6.768,929,3.898,930,3.898,931,3.898,932,6.632,933,3.898,934,3.898,935,5.179,936,3.898,937,3.898,938,3.898,939,3.898,940,5.179,941,5.179,942,3.898,943,3.898,944,3.898,945,5.179,946,5.179,947,3.898,948,3.898,949,3.898,950,3.898,951,3.898,952,3.33,953,3.898,954,3.898,955,3.898,956,3.898,957,3.898,958,3.898,959,3.898,960,3.898,961,3.898,962,3.33,963,3.898,964,3.898,965,3.898,966,3.898,967,3.898,968,3.898,969,3.33]],["title/modules.html",[74,2.181]],["body/modules.html",[19,0.017,70,0.017,71,0.017,73,3.108,74,2.198,125,3.391,135,3.108,136,2.873,137,2.873,138,2.873,148,2.873,952,5.778,970,6.497,971,6.497,972,7.141,973,6.764,974,6.764]],["title/overview.html",[975,4.187]],["body/overview.html",[2,1.18,19,0.021,29,3.078,31,2.724,53,1.944,55,2.294,56,3.202,70,0.013,71,0.013,72,1.116,73,3.381,74,1.487,115,1.808,121,3.125,125,4.845,126,1.808,127,2.103,128,2.103,129,1.808,130,2.103,131,2.103,132,2.855,133,2.855,134,2.855,135,3.381,136,3.781,137,3.382,138,3.857,139,2.935,140,2.103,141,2.103,148,4.149,157,1.321,305,2.855,307,2.855,308,2.855,309,3.381,310,3.381,311,3.381,359,2.534,427,2.534,432,2.855,433,2.855,434,2.855,435,4.091,579,2.294,714,2.855,715,2.855,716,2.855,840,2.855,975,2.855,976,3.341,977,3.341]],["title/properties.html",[323,1.525,854,2.562]],["body/properties.html",[19,0.021,70,0.018,71,0.018,195,3.433,323,1.926,962,4.66,969,4.66,978,5.454,979,5.454,980,5.454]],["title/miscellaneous/typealiases.html",[904,1.745,981,4.319]],["body/miscellaneous/typealiases.html",[10,0.729,19,0.018,21,0.887,70,0.018,71,0.018,511,4.887,586,3.8,904,3.219,911,4.727,982,5.533]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":979,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["0.1.8",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":850,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":53,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["1.0.0",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["1.0.38",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["1.0.6",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["1.1.23",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["1.4.11",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["1.8.6",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":977,"title":{},"body":{"overview.html":{}}}],["14",{"_index":840,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["16).tostring(16",{"_index":745,"title":{},"body":{"modules/UserModule.html":{}}}],["17.1.1",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["17.1.14",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":55,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"overview.html":{}}}],["2.0.0",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["2.2.1",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["2.4.6",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":597,"title":{},"body":{"injectables/TransformInterceptor.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["3",{"_index":56,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"overview.html":{}}}],["3.2.0",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["3/21",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":501,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["5.4.0",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["6.4.14",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["6.9.9",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":976,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":562,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["8.11.3",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":428,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_accesstoken",{"_index":475,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["_refreshtoken",{"_index":470,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["abstract",{"_index":357,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access",{"_index":58,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["accesstoken",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NaverUserStrategy.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["addbearerauth",{"_index":333,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["ajfldjsaflkgjdlf",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["aliases",{"_index":982,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":953,"title":{},"body":{"index.html":{}}}],["apicreatedresponse",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apicreatedresponse({description",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam({name",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":370,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["apiproperty({required",{"_index":619,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["apitags",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('user",{"_index":693,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('userentity",{"_index":647,"title":{},"body":{"entities/User.html":{}}}],["app",{"_index":930,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":122,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfigmodule",{"_index":73,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appcontroller",{"_index":114,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":922,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":125,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":121,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":557,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["argumentshost",{"_index":508,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array(32",{"_index":742,"title":{},"body":{"modules/UserModule.html":{}}}],["async",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["attach_save_path",{"_index":98,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["auth",{"_index":156,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"coverage.html":{}}}],["auth.controller",{"_index":313,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.dto",{"_index":616,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["auth.dto.ts",{"_index":376,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["auth.service",{"_index":30,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{}}}],["auth/auth.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/guard/bearer",{"_index":690,"title":{},"body":{"controllers/UserController.html":{}}}],["auth/interface/request",{"_index":691,"title":{},"body":{"controllers/UserController.html":{}}}],["auth/pipe/password.pipe",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["authcontroller",{"_index":159,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":461,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{}}}],["authguard(providerenum.google",{"_index":460,"title":{},"body":{"injectables/GoogleUserGuard.html":{}}}],["authguard(providerenum.local",{"_index":534,"title":{},"body":{"injectables/LocalUserGuard.html":{}}}],["authguard(providerenum.naver",{"_index":545,"title":{},"body":{"injectables/NaverUserGuard.html":{}}}],["authmodule",{"_index":148,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":962,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":29,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":430,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":971,"title":{},"body":{"modules.html":{}}}],["await",{"_index":50,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":954,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":560,"title":{},"body":{"injectables/PasswordPipe.html":{},"injectables/UserService.html":{}}}],["base64",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["baseapidocument",{"_index":321,"title":{"classes/BaseAPIDocument.html":{}},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["baseentity",{"_index":340,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"coverage.html":{}}}],["basictokenguard",{"_index":242,"title":{"guards/BasicTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"coverage.html":{}}}],["bcrypt",{"_index":643,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(inputpassword",{"_index":667,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.gensalt(10",{"_index":663,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["bcrypt.hash(confirmpassword",{"_index":822,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(newpassword",{"_index":665,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":644,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bearertokenguard",{"_index":9,"title":{"guards/BearerTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["beforeinsert",{"_index":640,"title":{},"body":{"entities/User.html":{}}}],["body",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body('email",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('otp",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":626,"title":{},"body":{"entities/User.html":{}}}],["bootstrap",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":972,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":973,"title":{},"body":{"modules.html":{}}}],["build",{"_index":339,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["builder",{"_index":325,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["building",{"_index":917,"title":{},"body":{"index.html":{}}}],["cache",{"_index":569,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["cachemodule",{"_index":565,"title":{},"body":{"modules/RedisModule.html":{}}}],["cachemodule.registerasync",{"_index":571,"title":{},"body":{"modules/RedisModule.html":{}}}],["callback",{"_index":740,"title":{},"body":{"modules/UserModule.html":{}}}],["callback(null",{"_index":747,"title":{},"body":{"modules/UserModule.html":{}}}],["callbackurl",{"_index":486,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["callhandler",{"_index":590,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["canactivate(context",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["catch",{"_index":498,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{}}}],["catch(exception",{"_index":507,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":513,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cb",{"_index":731,"title":{},"body":{"modules/UserModule.html":{}}}],["cb(null",{"_index":738,"title":{},"body":{"modules/UserModule.html":{}}}],["changepassword",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"injectables/UserService.html":{}}}],["changepassword(email",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(userid",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["changepasswordbyemail",{"_index":750,"title":{},"body":{"injectables/UserService.html":{}}}],["changepasswordbyemail(email",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["changepassworddto",{"_index":176,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["checkpassword(inputpassword",{"_index":666,"title":{},"body":{"entities/User.html":{}}}],["class",{"_index":34,"title":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/Auth.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clientid",{"_index":482,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["clientsecret",{"_index":484,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["cluster_appmodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":305,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":432,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":433,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":434,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":714,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":715,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":717,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":716,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":641,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":627,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":629,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":635,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":623,"title":{},"body":{"entities/User.html":{}}}],["common/base.entity",{"_index":639,"title":{},"body":{"entities/User.html":{}}}],["compodoc/compodoc",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["config/config.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":78,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":81,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["configservice",{"_index":414,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"modules/RedisModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["configservice.get('attach_save_path')}/${format(new",{"_index":733,"title":{},"body":{"modules/UserModule.html":{}}}],["configservice.get('email_password",{"_index":456,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":453,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":454,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('google_auth_callback_url",{"_index":487,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["configservice.get('google_auth_client_id",{"_index":483,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["configservice.get('google_auth_client_secret",{"_index":485,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["configservice.get('naver_auth_callback_url",{"_index":550,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["configservice.get('naver_auth_client_id",{"_index":548,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["configservice.get('naver_auth_client_secret",{"_index":549,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":426,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":421,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('redis_host",{"_index":572,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_port",{"_index":573,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_ttl",{"_index":575,"title":{},"body":{"modules/RedisModule.html":{}}}],["confirmpassword",{"_index":369,"title":{},"body":{"classes/ChangePasswordDto.html":{},"injectables/UserService.html":{}}}],["console.log(emailuser",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(err",{"_index":668,"title":{},"body":{"entities/User.html":{}}}],["const",{"_index":39,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":36,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":361,"title":{},"body":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/LocalUserStrategy.html":{}}}],["constructor(configservice",{"_index":441,"title":{},"body":{"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["constructor(private",{"_index":123,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/LocalUserStrategy.html":{}}}],["constructor(userrepository",{"_index":762,"title":{},"body":{"injectables/UserService.html":{}}}],["context",{"_index":23,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":41,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":605,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":113,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":692,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":832,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":615,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["createauthdto",{"_index":374,"title":{"classes/CreateAuthDto.html":{}},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["createdat",{"_index":342,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdatecolumn",{"_index":347,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createinfo",{"_index":846,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createinfo(status",{"_index":610,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["createinfo(statuscode",{"_index":600,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["createsocialuser",{"_index":751,"title":{},"body":{"injectables/UserService.html":{}}}],["createsocialuser(socialuserdto",{"_index":770,"title":{},"body":{"injectables/UserService.html":{}}}],["createsocialuserdto",{"_index":377,"title":{"classes/CreateSocialUserDto.html":{}},"body":{"classes/CreateSocialUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createtokenaccess",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenaccess(@headers('authorization",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenaccess(rawtoken",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenrefresh",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenrefresh(@headers('authorization",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtokenrefresh(rawtoken",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtransport",{"_index":449,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuser",{"_index":752,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":773,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":213,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.nickname",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":514,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":517,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":516,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["d",{"_index":657,"title":{},"body":{"entities/User.html":{}}}],["data",{"_index":529,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["database",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":135,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":346,"title":{},"body":{"classes/BaseEntity.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":528,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["declarations",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":327,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletedat",{"_index":343,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletedatecolumn",{"_index":349,"title":{},"body":{"classes/BaseEntity.html":{}}}],["dependencies",{"_index":126,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["dest",{"_index":732,"title":{},"body":{"modules/UserModule.html":{}}}],["destination",{"_index":730,"title":{},"body":{"modules/UserModule.html":{}}}],["development",{"_index":931,"title":{},"body":{"index.html":{}}}],["diskpath",{"_index":696,"title":{},"body":{"controllers/UserController.html":{}}}],["diskpath.replace(/\\\\/gi",{"_index":703,"title":{},"body":{"controllers/UserController.html":{}}}],["diskstorage",{"_index":722,"title":{},"body":{"modules/UserModule.html":{}}}],["displayname",{"_index":490,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["documentation",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":329,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["done",{"_index":472,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["done(null",{"_index":489,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["dto/change",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/update",{"_index":689,"title":{},"body":{"controllers/UserController.html":{}}}],["e2e",{"_index":942,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":918,"title":{},"body":{"index.html":{}}}],["email",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["email.service",{"_index":437,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["email:password",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["emailexists",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["emailmodule",{"_index":136,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":435,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emailuser",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["emailuser.email",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["entities",{"_index":427,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/provider.enum",{"_index":399,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["entities/user.entity",{"_index":720,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":620,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":429,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":636,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":905,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":499,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{}}}],["err.status",{"_index":500,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["error",{"_index":520,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.message",{"_index":531,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["example",{"_index":927,"title":{},"body":{"index.html":{}}}],["exception",{"_index":510,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":505,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":509,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":521,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":519,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":506,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":15,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["exist",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["existuser",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["export",{"_index":33,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["exports",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":512,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":674,"title":{},"body":{"controllers/UserController.html":{}}}],["extends",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"classes/UpdateAuthDto.html":{},"entities/User.html":{}}}],["extname",{"_index":726,"title":{},"body":{"modules/UserModule.html":{}}}],["false",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["file.originalname",{"_index":701,"title":{},"body":{"controllers/UserController.html":{}}}],["file.path.replace",{"_index":697,"title":{},"body":{"controllers/UserController.html":{}}}],["file.size",{"_index":705,"title":{},"body":{"controllers/UserController.html":{}}}],["fileinterceptor",{"_index":687,"title":{},"body":{"controllers/UserController.html":{}}}],["filename",{"_index":700,"title":{},"body":{"controllers/UserController.html":{}}}],["filename(req",{"_index":739,"title":{},"body":{"modules/UserModule.html":{}}}],["fill(null",{"_index":743,"title":{},"body":{"modules/UserModule.html":{}}}],["finduserbyemail",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemail(email",{"_index":775,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbynickname",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbynickname(nickname",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyphone",{"_index":755,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyphone(phone",{"_index":779,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserforpasswordreset",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserforpasswordreset(userinfo",{"_index":781,"title":{},"body":{"injectables/UserService.html":{}}}],["format",{"_index":723,"title":{},"body":{"modules/UserModule.html":{}}}],["forwardref",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["found",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["framework",{"_index":916,"title":{},"body":{"index.html":{}}}],["fs",{"_index":725,"title":{},"body":{"modules/UserModule.html":{}}}],["fs.existssync(dest",{"_index":735,"title":{},"body":{"modules/UserModule.html":{}}}],["fs.mkdirsync(dest",{"_index":736,"title":{},"body":{"modules/UserModule.html":{}}}],["function",{"_index":599,"title":{},"body":{"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["functions",{"_index":909,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('google/callback",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback')@useguards(googleuserguard)@apioperation({summary",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/google",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/google')@useguards(googleuserguard)@apioperation({summary",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/naver",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('login/naver')@useguards(naveruserguard)@apioperation({summary",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver/callback",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('naver/callback')@useguards(naveruserguard)@apioperation({summary",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({summary",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":912,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["getuser(@body('userid",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuser(userid",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["getuserbyemail",{"_index":757,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemail(email",{"_index":784,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid",{"_index":758,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid(userid",{"_index":786,"title":{},"body":{"injectables/UserService.html":{}}}],["google",{"_index":101,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/GoogleUserStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["google_auth_callback_url",{"_index":104,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_client_id",{"_index":102,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["google_auth_client_secret",{"_index":103,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["googlelogin",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(@req",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(req",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleuserguard",{"_index":246,"title":{"injectables/GoogleUserGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleUserGuard.html":{},"coverage.html":{}}}],["googleuserstrategy",{"_index":309,"title":{"injectables/GoogleUserStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleUserStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["graph",{"_index":970,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":645,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["gravatar.url(this.email",{"_index":653,"title":{},"body":{"entities/User.html":{}}}],["grow",{"_index":949,"title":{},"body":{"index.html":{}}}],["guard",{"_index":358,"title":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{}},"body":{"coverage.html":{}}}],["guard/basic",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/bearer",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/google",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/naver",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":359,"title":{},"body":{"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"overview.html":{}}}],["handle",{"_index":607,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["hapi/joi",{"_index":77,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["hashpassword(newpassword",{"_index":661,"title":{},"body":{"entities/User.html":{}}}],["headers",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["hello",{"_index":154,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":959,"title":{},"body":{"index.html":{}}}],["host",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["host.switchtohttp",{"_index":515,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":476,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{}}}],["httpexception('not",{"_index":495,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/UserService.html":{}}}],["httpexceptionfilter",{"_index":503,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https",{"_index":660,"title":{},"body":{"entities/User.html":{}}}],["https://nestjs.com",{"_index":966,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/UserService.html":{}}}],["httpstatus.conflict",{"_index":497,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["httpstatus.not_found",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":344,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["imginfo",{"_index":699,"title":{},"body":{"controllers/UserController.html":{}}}],["imginfo.path",{"_index":707,"title":{},"body":{"controllers/UserController.html":{}}}],["implements",{"_index":35,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":26,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":80,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["initializeoptions",{"_index":326,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["inject",{"_index":416,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["instagram",{"_index":335,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["installation",{"_index":926,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":929,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":587,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":588,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":578,"title":{"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{}},"body":{"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["interface/request",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["interfaces",{"_index":579,"title":{},"body":{"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":646,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":394,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isemail()@apiproperty",{"_index":383,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isglobal",{"_index":576,"title":{},"body":{"modules/RedisModule.html":{}}}],["isnotempty",{"_index":395,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isstring",{"_index":396,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isstring()@apiproperty",{"_index":392,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":385,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["isverified",{"_index":622,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["joi",{"_index":76,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().required",{"_index":85,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.object",{"_index":83,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().required",{"_index":88,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["join",{"_index":746,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["jwt",{"_index":99,"title":{},"body":{"modules/AppConfigModule.html":{},"dependencies.html":{}}}],["jwt_access_token_expiration_time",{"_index":112,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_access_token_secret",{"_index":111,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":110,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_refresh_token_secret",{"_index":109,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwt_secret_key",{"_index":100,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["jwtmodule",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["kakao",{"_index":908,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["kamil",{"_index":963,"title":{},"body":{"index.html":{}}}],["legend",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":969,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":946,"title":{},"body":{"index.html":{}}}],["light",{"_index":724,"title":{},"body":{"modules/UserModule.html":{},"dependencies.html":{}}}],["local",{"_index":538,"title":{},"body":{"injectables/LocalUserStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["localuserguard",{"_index":532,"title":{"injectables/LocalUserGuard.html":{}},"body":{"injectables/LocalUserGuard.html":{},"coverage.html":{}}}],["localuserstrategy",{"_index":310,"title":{"injectables/LocalUserStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalUserStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["loginemail",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginemail(@headers('authorization",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginemail(rawtoken",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":541,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["lts.1",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":447,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":444,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":567,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["map",{"_index":595,"title":{},"body":{"injectables/TransformInterceptor.html":{},"modules/UserModule.html":{}}}],["markisverify",{"_index":759,"title":{},"body":{"injectables/UserService.html":{}}}],["markisverify(email",{"_index":788,"title":{},"body":{"injectables/UserService.html":{}}}],["matched",{"_index":496,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["matching",{"_index":71,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["math.round(math.random",{"_index":744,"title":{},"body":{"modules/UserModule.html":{}}}],["message",{"_index":524,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["metadata",{"_index":556,"title":{},"body":{"injectables/PasswordPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":397,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["minlength(7",{"_index":400,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["minlength(7)@isstring()@apiproperty",{"_index":387,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["miscellaneous",{"_index":904,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":945,"title":{},"body":{"index.html":{}}}],["mm",{"_index":658,"title":{},"body":{"entities/User.html":{}}}],["mode",{"_index":935,"title":{},"body":{"index.html":{}}}],["module",{"_index":72,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":958,"title":{},"body":{"index.html":{}}}],["msg",{"_index":603,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["multer",{"_index":97,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":721,"title":{},"body":{"modules/UserModule.html":{}}}],["multermodule.registerasync",{"_index":728,"title":{},"body":{"modules/UserModule.html":{}}}],["myśliwiec",{"_index":964,"title":{},"body":{"index.html":{}}}],["name",{"_index":20,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["naver",{"_index":105,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/NaverUserStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["naver_auth_callback_url",{"_index":108,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver_auth_client_id",{"_index":106,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naver_auth_client_secret",{"_index":107,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["naverlogin",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(@req",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(req",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["naveruserguard",{"_index":253,"title":{"injectables/NaverUserGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/NaverUserGuard.html":{},"coverage.html":{}}}],["naveruserstrategy",{"_index":311,"title":{"injectables/NaverUserStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/NaverUserStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["nest",{"_index":923,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":968,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":593,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nestjs/cache",{"_index":566,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":79,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"modules/RedisModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":462,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":688,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":413,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":45,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newtoken",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["newuser",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/UserService.html":{}}}],["next",{"_index":589,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nickname",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["nicknameexists",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":915,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":450,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":448,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":439,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":928,"title":{},"body":{"index.html":{}}}],["null",{"_index":530,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["nullable",{"_index":649,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":523,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["oauth2",{"_index":480,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"dependencies.html":{}}}],["object.assign",{"_index":609,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["observable",{"_index":592,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["open",{"_index":947,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":446,"title":{},"body":{"injectables/EmailService.html":{}}}],["otp",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["out",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":975,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":854,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["param('email",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parser",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":614,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["partialtype(createauthdto",{"_index":613,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["pass",{"_index":455,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":479,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":477,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["passportstrategy(strategy",{"_index":466,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["password",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["password')@apioperation({summary",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["password.dto.ts",{"_index":368,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:11",{"_index":372,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:5",{"_index":373,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:8",{"_index":371,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password/:email",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["password/new",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordpipe",{"_index":409,"title":{"injectables/PasswordPipe.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["path",{"_index":702,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["payload.interface.ts",{"_index":584,"title":{},"body":{"interfaces/TokenPayloadInterface.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["pg",{"_index":656,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["phone",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["phoneuser",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["picture",{"_index":491,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["pipe(map((data",{"_index":608,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["pipetransform",{"_index":559,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["please",{"_index":956,"title":{},"body":{"index.html":{}}}],["port",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["portfolio",{"_index":337,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["post",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('change",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('email/verify",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('email/verify')@apioperation({summary",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login/email",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login/email')@useguards(basictokenguard)@apioperation({summary",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register/email",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register/email')@apioperation({summary",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send/email/reset",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/access",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/access')@useguards(refreshtokenguard)@apioperation({summary",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/refresh",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('token/refresh')@useguards(refreshtokenguard)@apioperation({summary",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('update/profile/:id",{"_index":708,"title":{},"body":{"controllers/UserController.html":{}}}],["post('update/profile/:id')@apioperation({summary",{"_index":675,"title":{},"body":{"controllers/UserController.html":{}}}],["post('upload",{"_index":680,"title":{},"body":{"controllers/UserController.html":{}}}],["post(`send/email/reset",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(send/email/reset",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":86,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":92,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_host",{"_index":87,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_password",{"_index":91,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_port",{"_index":89,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["postgres_user",{"_index":90,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["prefix",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":355,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":351,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":37,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["processusercredentials",{"_index":650,"title":{},"body":{"entities/User.html":{}}}],["production",{"_index":937,"title":{},"body":{"index.html":{}}}],["profile",{"_index":471,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["profile._json",{"_index":552,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["profile_image",{"_index":551,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["profileimg",{"_index":381,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profileimg')@apioperation({summary",{"_index":681,"title":{},"body":{"controllers/UserController.html":{}}}],["progressive",{"_index":914,"title":{},"body":{"index.html":{}}}],["project",{"_index":948,"title":{},"body":{"index.html":{}}}],["promise",{"_index":25,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{}}}],["properties",{"_index":323,"title":{"properties.html":{}},"body":{"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/LoginUserDto.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/VerifyPayloadInterface.html":{},"properties.html":{}}}],["protocol",{"_index":659,"title":{},"body":{"entities/User.html":{}}}],["provider",{"_index":382,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["provider.enum",{"_index":642,"title":{},"body":{"entities/User.html":{}}}],["providerenum",{"_index":390,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["providerenum.local",{"_index":391,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":324,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"entities/User.html":{}}}],["r",{"_index":655,"title":{},"body":{"entities/User.html":{}}}],["randomname",{"_index":741,"title":{},"body":{"modules/UserModule.html":{}}}],["randomname}${extname(file.originalname",{"_index":748,"title":{},"body":{"modules/UserModule.html":{}}}],["rawtoken",{"_index":42,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["read",{"_index":957,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":38,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["recursive",{"_index":737,"title":{},"body":{"modules/UserModule.html":{}}}],["redis",{"_index":93,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["redis/redis.module",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["redis_host",{"_index":94,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_port",{"_index":95,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redis_ttl",{"_index":96,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["redismodule",{"_index":137,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisstore",{"_index":568,"title":{},"body":{"modules/RedisModule.html":{}}}],["reflect",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":59,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["refreshtoken",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/NaverUserStrategy.html":{}}}],["refreshtokenguard",{"_index":68,"title":{"injectables/RefreshTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["registeremail",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeremail(@body",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["registeremail(createuserdto",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["repository",{"_index":763,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":40,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["req.headers['authorization",{"_index":43,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.token",{"_index":62,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.tokentype",{"_index":63,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["req.user",{"_index":61,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["request",{"_index":52,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{}}}],["requestuser",{"_index":201,"title":{"interfaces/RequestUser.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestUser.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["required",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{}}}],["res",{"_index":604,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["res.statuscode",{"_index":606,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["reset",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetnewpassword",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetnewpassword(email",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(@body('userinfo",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(userinfo",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["response",{"_index":511,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["response.status(status).json",{"_index":526,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":49,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["result.type",{"_index":64,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["results",{"_index":70,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":65,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/LocalUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":24,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseAPIDocument.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returntype",{"_index":601,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["run",{"_index":932,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":594,"title":{},"body":{"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":596,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["s",{"_index":654,"title":{},"body":{"entities/User.html":{}}}],["saltvalue",{"_index":662,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["scalable",{"_index":919,"title":{},"body":{"index.html":{}}}],["scope",{"_index":488,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["sendmail",{"_index":440,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":443,"title":{},"body":{"injectables/EmailService.html":{}}}],["server",{"_index":920,"title":{},"body":{"index.html":{}}}],["service",{"_index":452,"title":{},"body":{"injectables/EmailService.html":{}}}],["service_port",{"_index":84,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["setdescription('jisu",{"_index":336,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["settitle('jisu",{"_index":334,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["setversion('1.0",{"_index":338,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["side",{"_index":921,"title":{},"body":{"index.html":{}}}],["size",{"_index":704,"title":{},"body":{"controllers/UserController.html":{}}}],["social",{"_index":379,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["socialuserdto",{"_index":772,"title":{},"body":{"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/BaseAPIDocument.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserGuard.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserGuard.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserGuard.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"index.html":{}}}],["sponsors",{"_index":951,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":910,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../provider.enum.ts",{"_index":906,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../transform.interceptor.ts",{"_index":911,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":152,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":153,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:103",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:111",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:120",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:131",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:140",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:150",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:161",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:166",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:177",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:71",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:84",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":312,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/change",{"_index":367,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":375,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":542,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":612,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":158,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guard/basic",{"_index":360,"title":{},"body":{"guards/BasicTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/bearer",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/google",{"_index":458,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"coverage.html":{}}}],["src/auth/guard/local",{"_index":533,"title":{},"body":{"injectables/LocalUserGuard.html":{},"coverage.html":{}}}],["src/auth/guard/naver",{"_index":544,"title":{},"body":{"injectables/NaverUserGuard.html":{},"coverage.html":{}}}],["src/auth/interface/request",{"_index":580,"title":{},"body":{"interfaces/RequestUser.html":{},"coverage.html":{}}}],["src/auth/interface/token",{"_index":583,"title":{},"body":{"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/interface/verify",{"_index":831,"title":{},"body":{"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/pipe/password.pipe.ts",{"_index":553,"title":{},"body":{"injectables/PasswordPipe.html":{},"coverage.html":{}}}],["src/auth/pipe/password.pipe.ts:10",{"_index":558,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["src/auth/stratges/google",{"_index":464,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"coverage.html":{}}}],["src/auth/stratges/local",{"_index":535,"title":{},"body":{"injectables/LocalUserStrategy.html":{},"coverage.html":{}}}],["src/auth/stratges/naver",{"_index":546,"title":{},"body":{"injectables/NaverUserStrategy.html":{},"coverage.html":{}}}],["src/common/base.entity.ts",{"_index":341,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/base.entity.ts:10",{"_index":352,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:13",{"_index":348,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:16",{"_index":354,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:19",{"_index":350,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/filter/http",{"_index":504,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/inceptors/transform.interceptor.ts",{"_index":586,"title":{},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/inceptors/transform.interceptor.ts:35",{"_index":591,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/config/config.module.ts",{"_index":75,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["src/config/swagger.documents.ts",{"_index":322,"title":{},"body":{"classes/BaseAPIDocument.html":{},"coverage.html":{}}}],["src/config/swagger.documents.ts:4",{"_index":330,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/config/swagger.documents.ts:6",{"_index":331,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["src/database/database.module.ts",{"_index":411,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email/email.module.ts",{"_index":436,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":438,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:18",{"_index":445,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":442,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":847,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/redis/redis.module.ts",{"_index":564,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/user/dto/create",{"_index":378,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":618,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/provider.enum.ts",{"_index":907,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/entities/user.entity.ts",{"_index":621,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":625,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:24",{"_index":630,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:31",{"_index":632,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:37",{"_index":634,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:68",{"_index":631,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:75",{"_index":633,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:84",{"_index":638,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:89",{"_index":628,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":670,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:32",{"_index":683,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:62",{"_index":677,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":718,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":749,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:105",{"_index":780,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:111",{"_index":782,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:125",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:139",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:151",{"_index":787,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:158",{"_index":789,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:172",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:184",{"_index":791,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":774,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:55",{"_index":771,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:62",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:71",{"_index":783,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:84",{"_index":785,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:93",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:99",{"_index":778,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":933,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":936,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":938,"title":{},"body":{"index.html":{}}}],["started",{"_index":913,"title":{"index.html":{}},"body":{}}],["starter",{"_index":925,"title":{},"body":{"index.html":{}}}],["statements",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":518,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["statuscode",{"_index":522,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["stay",{"_index":960,"title":{},"body":{"index.html":{}}}],["storage",{"_index":729,"title":{},"body":{"modules/UserModule.html":{}}}],["store",{"_index":570,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":478,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["stratges/google",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{}}}],["stratges/local",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{}}}],["stratges/naver",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":120,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{}}}],["success",{"_index":598,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["summary",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":481,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["super.canactivate(context",{"_index":66,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["support",{"_index":952,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":974,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":431,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":602,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["table",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":941,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":944,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":943,"title":{},"body":{"index.html":{}}}],["tests",{"_index":940,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":950,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.authenticatewithemailandpassword",{"_index":364,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["this.authservice.changepassword(email",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.confirmotp(email",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.decodebasictoken(token",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{}}}],["this.authservice.extracttokenfromheader(rawtoken",{"_index":47,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.authservice.finduser",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalUserStrategy.html":{}}}],["this.authservice.getuser(userid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginuser(user",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginwithemail",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginwithemail(credentials",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.registerwithemail(createuserdto",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(userinfo",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.rotatetoken(token",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendverificationlink(createuserdto.email",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifytoken(token",{"_index":51,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.builder",{"_index":332,"title":{},"body":{"classes/BaseAPIDocument.html":{}}}],["this.configservice.get('attach_save_path",{"_index":698,"title":{},"body":{"controllers/UserController.html":{}}}],["this.finduserbyemail(email",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduserbyemail(userinfo",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["this.finduserbyphone(userinfo",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["this.getuserbyid(id",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["this.nodemailertransport",{"_index":451,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":457,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.password",{"_index":664,"title":{},"body":{"entities/User.html":{}}}],["this.profileimg",{"_index":652,"title":{},"body":{"entities/User.html":{}}}],["this.provider",{"_index":651,"title":{},"body":{"entities/User.html":{}}}],["this.userrepository.create",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create(socialuserdto",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.exists",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createsocialuser",{"_index":502,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["this.userservice.finduserbyemail(email",{"_index":493,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["this.userservice.getuserbyemail(result.email",{"_index":60,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["this.userservice.updateprofile",{"_index":710,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateprofileimg(user.id",{"_index":706,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":44,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":527,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["token",{"_index":46,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["token.guard",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:11",{"_index":365,"title":{},"body":{"guards/BearerTokenGuard.html":{}}}],["token.guard.ts:16",{"_index":366,"title":{},"body":{"guards/BearerTokenGuard.html":{}}}],["token.guard.ts:29",{"_index":362,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["token.guard.ts:32",{"_index":363,"title":{},"body":{"guards/BasicTokenGuard.html":{}}}],["token.guard.ts:48",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["token.guard.ts:63",{"_index":577,"title":{},"body":{"injectables/RefreshTokenGuard.html":{}}}],["tokenpayloadinterface",{"_index":582,"title":{"interfaces/TokenPayloadInterface.html":{}},"body":{"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["tokentype",{"_index":57,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["touch",{"_index":961,"title":{},"body":{"index.html":{}}}],["transform",{"_index":554,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["transform(value",{"_index":555,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["transformer",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["transforminterceptor",{"_index":585,"title":{"injectables/TransformInterceptor.html":{}},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":48,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"injectables/RefreshTokenGuard.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty",{"_index":624,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":492,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"entities/User.html":{}}}],["ttl",{"_index":574,"title":{},"body":{"modules/RedisModule.html":{}}}],["twitter",{"_index":967,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LocalUserStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverUserStrategy.html":{},"injectables/PasswordPipe.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":981,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":525,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/TransformInterceptor.html":{}}}],["typeorm",{"_index":356,"title":{},"body":{"classes/BaseEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":412,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":727,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":415,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types/bcryptjs",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["types/gravatar",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":924,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":27,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception('access",{"_index":67,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["unauthorizedexception('refresh",{"_index":69,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/RefreshTokenGuard.html":{}}}],["undefined})@apiproperty",{"_index":637,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":648,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":939,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":980,"title":{},"body":{"properties.html":{}}}],["updateauthdto",{"_index":611,"title":{"classes/UpdateAuthDto.html":{}},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":345,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedatecolumn",{"_index":353,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updateprofile",{"_index":671,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateprofile(id",{"_index":790,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofile(req",{"_index":673,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofileimg",{"_index":760,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileimg(userid",{"_index":792,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":617,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updateuserdto.nickname",{"_index":713,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserdto.password",{"_index":712,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadedfile",{"_index":684,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadprofileimg",{"_index":672,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadprofileimg(req",{"_index":679,"title":{},"body":{"controllers/UserController.html":{}}}],["usefactory",{"_index":417,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(accesstokenguard",{"_index":695,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(accesstokenguard)@useinterceptors(undefined)@apicreatedresponse({description",{"_index":676,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(basictokenguard",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(googleuserguard",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(naveruserguard",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshtokenguard",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":685,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":694,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(undefined)@useguards(accesstokenguard",{"_index":682,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":54,"title":{"entities/User.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/BasicTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/EmailService.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"interfaces/RequestUser.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":719,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":380,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:13",{"_index":384,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:16",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":388,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:20",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":393,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:24",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":389,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.dto.ts:28",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:5",{"_index":543,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:8",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:9",{"_index":386,"title":{},"body":{"classes/CreateSocialUserDto.html":{}}}],["user.email",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["user.guard",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.guard.ts",{"_index":459,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{},"coverage.html":{}}}],["user.hashpassword(password",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["user.id",{"_index":711,"title":{},"body":{"controllers/UserController.html":{}}}],["user.interface",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["user.interface.ts",{"_index":581,"title":{},"body":{"interfaces/RequestUser.html":{},"coverage.html":{}}}],["user.nickname",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profileimg",{"_index":709,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.provider",{"_index":494,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["user.service",{"_index":686,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.strategy",{"_index":315,"title":{},"body":{"modules/AuthModule.html":{}}}],["user.strategy.ts",{"_index":465,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"coverage.html":{}}}],["user.strategy.ts:16",{"_index":537,"title":{},"body":{"injectables/LocalUserStrategy.html":{}}}],["user.strategy.ts:20",{"_index":474,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["user.strategy.ts:8",{"_index":468,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["user/dto/create",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/entities/provider.enum",{"_index":463,"title":{},"body":{"injectables/GoogleUserGuard.html":{},"injectables/LocalUserGuard.html":{},"injectables/NaverUserGuard.html":{}}}],["user/entities/user.entity",{"_index":539,"title":{},"body":{"injectables/LocalUserStrategy.html":{},"interfaces/RequestUser.html":{}}}],["user/user.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":32,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{}}}],["usercontroller",{"_index":669,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/TokenPayloadInterface.html":{},"injectables/UserService.html":{}}}],["userinfo",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":138,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":422,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["usernamefield",{"_index":540,"title":{},"body":{"injectables/LocalUserStrategy.html":{}}}],["userrepository",{"_index":765,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":31,"title":{"injectables/UserService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"guards/BearerTokenGuard.html":{},"injectables/GoogleUserStrategy.html":{},"injectables/NaverUserStrategy.html":{},"injectables/RefreshTokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":467,"title":{},"body":{"injectables/GoogleUserStrategy.html":{},"injectables/LocalUserStrategy.html":{},"injectables/NaverUserStrategy.html":{}}}],["validate(_accesstoken",{"_index":469,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["validate(accesstoken",{"_index":547,"title":{},"body":{"injectables/NaverUserStrategy.html":{}}}],["validate(email",{"_index":536,"title":{},"body":{"injectables/LocalUserStrategy.html":{}}}],["validateemail",{"_index":761,"title":{},"body":{"injectables/UserService.html":{}}}],["validateemail(email",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["validationschema",{"_index":82,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validator",{"_index":398,"title":{},"body":{"classes/CreateSocialUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":328,"title":{},"body":{"classes/BaseAPIDocument.html":{},"classes/CreateSocialUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/PasswordPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["value.tostring",{"_index":563,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["value.tostring().length",{"_index":561,"title":{},"body":{"injectables/PasswordPipe.html":{}}}],["verifycallback",{"_index":473,"title":{},"body":{"injectables/GoogleUserStrategy.html":{}}}],["verifyemail",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemail(@body('token",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemail(token",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypayloadinterface",{"_index":830,"title":{"interfaces/VerifyPayloadInterface.html":{}},"body":{"interfaces/VerifyPayloadInterface.html":{},"coverage.html":{}}}],["version",{"_index":978,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":934,"title":{},"body":{"index.html":{}}}],["website",{"_index":965,"title":{},"body":{"index.html":{}}}],["world",{"_index":155,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":678,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["you'd",{"_index":955,"title":{},"body":{"index.html":{}}}],["yyyy}{mm",{"_index":734,"title":{},"body":{"modules/UserModule.html":{}}}],["zoom",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/bearer-token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BearerTokenGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const result = await this.authService.verifyToken(token);\n\n    /**\n     * request에 넣을 정보\n     *\n     * 1) 사용자 정보 - user\n     * 2) token - token\n     * 3) tokenType - access | refresh\n     * */\n\n    const user = await this.userService.getUserByEmail(result.email);\n    req.user = user;\n    req.token = token;\n    req.tokenType = result.type;\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'access') {\n      throw new UnauthorizedException('Access Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'refresh') {\n      throw new UnauthorizedException('Refresh Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        SERVICE_PORT: Joi.number().required(),\n        // Postgres 설정\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n\n        // Redis 설정\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_TTL: Joi.number().required(),\n\n        // Multer 설정 [파일 업로드]\n        ATTACH_SAVE_PATH: Joi.string().required(),\n\n        // JWT 설정\n        JWT_SECRET_KEY: Joi.string().required(),\n\n        // Google 설정\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n        GOOGLE_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        // Naver 설정\n        NAVER_AUTH_CLIENT_ID: Joi.string().required(),\n        NAVER_AUTH_CLIENT_SECRET: Joi.string().required(),\n        NAVER_AUTH_CALLBACK_URL: Joi.string().required(),\n\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n      }),\n    }),\n  ],\n})\nexport class AppConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AppConfigModule } from './config/config.module';\nimport { DatabaseModule } from './database/database.module';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { EmailModule } from './email/email.module';\nimport { RedisModule } from './redis/redis.module';\n\n@Module({\n  imports: [\n    AppConfigModule,\n    DatabaseModule,\n    UserModule,\n    forwardRef(() => AuthModule),\n    EmailModule,\n    RedisModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createTokenAccess\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createTokenRefresh\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLoginCallback\n                            \n                            \n                                    \n                                    \n                                    \n                                loginEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                naverLoginCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                registerEmail\n                            \n                            \n                                    \n                                    Async\n                                resetNewPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(email: string, changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change-password')@ApiOperation({summary: '로그인 후 비밀번호 변경'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createTokenAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTokenAccess(rawToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token/access')@UseGuards(RefreshTokenGuard)@ApiOperation({summary: 'AccessToken 발급'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createTokenRefresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTokenRefresh(rawToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token/refresh')@UseGuards(RefreshTokenGuard)@ApiOperation({summary: 'RefreshToken 발급'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: '유저 정보 가져오기'})@ApiParam({name: 'userID', required: true, description: '유저 아이디'})@ApiCreatedResponse({description: '유저 정보 가져오기'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login/google')@UseGuards(GoogleUserGuard)@ApiOperation({summary: '구글 소셜 로그인'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLoginCallback(req: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(GoogleUserGuard)@ApiOperation({summary: '구글 소셜 로그인 콜백'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        loginEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginEmail(rawToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login/email')@UseGuards(BasicTokenGuard)@ApiOperation({summary: '유저 이메일 로그인'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login/naver')@UseGuards(NaverUserGuard)@ApiOperation({summary: '네이버 소셜 로그인'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:131\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        naverLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLoginCallback(req: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('naver/callback')@UseGuards(NaverUserGuard)@ApiOperation({summary: '네이버 소셜 로그인 콜백'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        registerEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerEmail(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register/email')@ApiOperation({summary: '유저 이메일 가입'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        resetNewPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetNewPassword(email: string, otp: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(send/email/reset-password/new-password/:email)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(userInfo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send/email/reset-password')@ApiOperation({summary: '로그인 전 비밀번호 초기화'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userInfo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyEmail(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('email/verify')@ApiOperation({summary: '이메일 본인인증'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Headers,\n  HttpStatus,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport {\n  ApiCreatedResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreateUserDto } from '../user/dto/create-user.dto';\nimport { BasicTokenGuard } from './guard/basic-token.guard';\nimport { RefreshTokenGuard } from './guard/bearer-token.guard';\nimport { GoogleUserGuard } from './guard/google-user.guard';\nimport { RequestUser } from './interface/request-user.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { NaverUserGuard } from './guard/naver-user.guard';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('token/access')\n  @UseGuards(RefreshTokenGuard)\n  @ApiOperation({\n    summary: 'AccessToken 발급',\n  })\n  async createTokenAccess(@Headers('authorization') rawToken: string) {\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    /**\n     * {accessToken : {token}}\n     */\n    const newToken = this.authService.rotateToken(token, false);\n    return {\n      accessToken: newToken,\n    };\n  }\n\n  @Post('token/refresh')\n  @UseGuards(RefreshTokenGuard)\n  @ApiOperation({\n    summary: 'RefreshToken 발급',\n  })\n  async createTokenRefresh(@Headers('authorization') rawToken: string) {\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    /**\n     * {refreshToken : {token}}\n     */\n    const newToken = this.authService.rotateToken(token, true);\n    return {\n      refreshToken: newToken,\n    };\n  }\n\n  @Post('login/email')\n  @UseGuards(BasicTokenGuard)\n  @ApiOperation({\n    summary: '유저 이메일 로그인',\n  })\n  loginEmail(@Headers('authorization') rawToken: string) {\n    // token = email:password => base64\n    // ajfldjsaflkgjdlf => email:password\n    const token = this.authService.extractTokenFromHeader(rawToken, false);\n    const credentials = this.authService.decodeBasicToken(token);\n\n    return this.authService.loginWithEmail(credentials);\n  }\n\n  @Post('register/email')\n  @ApiOperation({\n    summary: '유저 이메일 가입',\n  })\n  async registerEmail(@Body() createUserDto: CreateUserDto) {\n    const newUser = this.authService.registerWithEmail(createUserDto);\n    await this.authService.sendVerificationLink(createUserDto.email);\n    return newUser;\n  }\n\n  // 유저 프로필 가져오기 [1명, by userId]\n  @Get()\n  @ApiOperation({\n    summary: '유저 정보 가져오기',\n  })\n  @ApiParam({\n    name: 'userID',\n    required: true,\n    description: '유저 아이디',\n  })\n  @ApiCreatedResponse({\n    description: '유저 정보 가져오기',\n  })\n  async getUser(@Body('userId') userId: string) {\n    return await this.authService.getUser(userId);\n  }\n  @Get('login/google')\n  @UseGuards(GoogleUserGuard)\n  @ApiOperation({\n    summary: '구글 소셜 로그인',\n  })\n  async googleLogin() {\n    return HttpStatus.OK;\n  }\n\n  @Get('google/callback')\n  @UseGuards(GoogleUserGuard)\n  @ApiOperation({\n    summary: '구글 소셜 로그인 콜백',\n  })\n  async googleLoginCallback(@Req() req: RequestUser) {\n    const { user } = req;\n    const token = await this.authService.loginUser(user);\n    return token;\n  }\n\n  @Get('login/naver')\n  @UseGuards(NaverUserGuard)\n  @ApiOperation({\n    summary: '네이버 소셜 로그인',\n  })\n  async naverLogin() {\n    return HttpStatus.OK;\n  }\n\n  @Get('naver/callback')\n  @UseGuards(NaverUserGuard)\n  @ApiOperation({\n    summary: '네이버 소셜 로그인 콜백',\n  })\n  async naverLoginCallback(@Req() req: RequestUser) {\n    const { user } = req;\n    const token = await this.authService.loginUser(user);\n    return token;\n  }\n\n  @Post('change-password')\n  @ApiOperation({\n    summary: '로그인 후 비밀번호 변경',\n  })\n  async changePassword(\n    @Body('email') email: string,\n    @Body() changePasswordDto: ChangePasswordDto,\n  ) {\n    return await this.authService.changePassword(email, changePasswordDto);\n  }\n\n  @Post('send/email/reset-password')\n  @ApiOperation({\n    summary: '로그인 전 비밀번호 초기화',\n  })\n  async resetPassword(@Body('userInfo') userInfo: string) {\n    return await this.authService.resetPassword(userInfo);\n  }\n\n  @Post(`send/email/reset-password/new-password/:email`)\n  async resetNewPassword(\n    @Param('email') email: string,\n    @Body('otp') otp: string,\n  ) {\n    return await this.authService.confirmOTP(email, otp);\n  }\n\n  @Post('email/verify')\n  @ApiOperation({\n    summary: '이메일 본인인증',\n  })\n  async verifyEmail(@Body('token') token: string) {\n    const { email, password } = this.authService.decodeBasicToken(token);\n    const user = await this.authService.findUser({\n      email,\n      password,\n    });\n\n    if (!user) {\n      return await this.authService.loginWithEmail({\n        email,\n        password,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleUserStrategy\n\nGoogleUserStrategy\n\nAuthModule -->\n\nGoogleUserStrategy->AuthModule\n\n\n\n\n\nLocalUserStrategy\n\nLocalUserStrategy\n\nAuthModule -->\n\nLocalUserStrategy->AuthModule\n\n\n\n\n\nNaverUserStrategy\n\nNaverUserStrategy\n\nAuthModule -->\n\nNaverUserStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleUserStrategy\n                        \n                        \n                            LocalUserStrategy\n                        \n                        \n                            NaverUserStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            RedisModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UserModule } from '../user/user.module';\nimport { LocalUserStrategy } from './stratges/local-user.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { GoogleUserStrategy } from './stratges/google-user.strategy';\nimport { NaverUserStrategy } from './stratges/naver-user.strategy';\nimport { EmailModule } from '../email/email.module';\nimport { RedisModule } from '../redis/redis.module';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    JwtModule.register({}),\n    ConfigModule,\n    EmailModule,\n    RedisModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalUserStrategy,\n    GoogleUserStrategy,\n    NaverUserStrategy,\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseAPIDocument.html":{"url":"classes/BaseAPIDocument.html","title":"class - BaseAPIDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseAPIDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/swagger.documents.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                builder\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                initializeOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        builder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DocumentBuilder()\n                    \n                \n                    \n                        \n                                Defined in src/config/swagger.documents.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/config/swagger.documents.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DocumentBuilder } from '@nestjs/swagger';\n\nexport class BaseAPIDocument {\n  public builder = new DocumentBuilder();\n\n  public initializeOptions() {\n    return this.builder\n      .addBearerAuth()\n      .setTitle('jisu-instagram')\n      .setDescription('jisu-instagram portfolio')\n      .setVersion('1.0')\n      .build();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    Public\n                                deletedAt\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @CreateDateColumn()\n  public createdAt: Date;\n\n  @UpdateDateColumn()\n  public updatedAt: Date;\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/BasicTokenGuard.html":{"url":"guards/BasicTokenGuard.html","title":"guard - BasicTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    BasicTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/basic-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/basic-token.guard.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/basic-token.guard.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class BasicTokenGuard implements CanActivate {\n  constructor(private readonly authService: AuthService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, false);\n\n    const { email, password } = this.authService.decodeBasicToken(token);\n\n    const user = await this.authService.authenticateWithEmailAndPassword({\n      email,\n      password,\n    });\n\n    req.user = user;\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/BearerTokenGuard.html":{"url":"guards/BearerTokenGuard.html","title":"guard - BearerTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    BearerTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/bearer-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/bearer-token.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const result = await this.authService.verifyToken(token);\n\n    /**\n     * request에 넣을 정보\n     *\n     * 1) 사용자 정보 - user\n     * 2) token - token\n     * 3) tokenType - access | refresh\n     * */\n\n    const user = await this.userService.getUserByEmail(result.email);\n    req.user = user;\n    req.token = token;\n    req.tokenType = result.type;\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'access') {\n      throw new UnauthorizedException('Access Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'refresh') {\n      throw new UnauthorizedException('Refresh Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ChangePasswordDto {\n  @ApiProperty()\n  password: string;\n\n  @ApiProperty()\n  changePassword: string;\n\n  @ApiProperty()\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSocialUserDto.html":{"url":"classes/CreateSocialUserDto.html","title":"class - CreateSocialUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSocialUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-social-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(7)@IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProviderEnum\n\n                    \n                \n                \n                    \n                        Default value : ProviderEnum.LOCAL\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-social-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ProviderEnum } from '../entities/provider.enum';\n\nexport class CreateSocialUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty()\n  name: string;\n\n  @IsEmail()\n  @ApiProperty()\n  email: string;\n\n  @MinLength(7)\n  @IsString()\n  @ApiProperty()\n  password?: string;\n\n  @IsString()\n  @ApiProperty()\n  provider?: ProviderEnum = ProviderEnum.LOCAL;\n\n  @ApiProperty()\n  profileImg?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nickname\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                    Optional\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProviderEnum\n\n                    \n                \n                \n                    \n                        Default value : ProviderEnum.LOCAL\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ProviderEnum } from '../entities/provider.enum';\nimport { PasswordPipe } from '../../auth/pipe/password.pipe';\n\nexport class CreateUserDto {\n  // 유저 이메일\n  @ApiProperty()\n  email: string;\n\n  // 유저 이름\n  @ApiProperty()\n  name: string;\n\n  // 유저 비밀번호\n  @ApiProperty()\n  password: string;\n\n  // 유저 닉네임\n  @ApiProperty()\n  nickname: string;\n\n  // 유저 휴대폰번호\n  @ApiProperty()\n  phone: string;\n\n  // 유저 가입경로\n  @ApiProperty()\n  provider?: ProviderEnum = ProviderEnum.LOCAL;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/email/email.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Mail.Options\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleUserGuard.html":{"url":"injectables/GoogleUserGuard.html","title":"injectable - GoogleUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google-user.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(ProviderEnum.GOOGLE)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProviderEnum } from '../../user/entities/provider.enum';\n\n@Injectable()\nexport class GoogleUserGuard extends AuthGuard(ProviderEnum.GOOGLE) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleUserStrategy.html":{"url":"injectables/GoogleUserStrategy.html","title":"injectable - GoogleUserStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleUserStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/stratges/google-user.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/stratges/google-user.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/stratges/google-user.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class GoogleUserStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_AUTH_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_AUTH_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_AUTH_CALLBACK_URL'),\n      scope: ['profile', 'email'],\n    });\n  }\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    //done(null, profile);\n    const { provider, displayName, email, picture } = profile;\n    try {\n      const user = await this.userService.findUserByEmail(email);\n      if (user.provider !== provider) {\n        throw new HttpException('Not Matched Provider', HttpStatus.CONFLICT);\n      }\n      done(null, user);\n    } catch (err) {\n      if (err.status === 404) {\n        // 회원가입 프로세스\n        const newUser = await this.userService.createSocialUser({\n          email,\n          name: displayName,\n          profileImg: picture,\n          provider,\n        });\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filter/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filter/http-exception.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  HttpException,\n  ExceptionFilter,\n  ArgumentsHost,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: any, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    const error = exception.getResponse() as\n      | string\n      | { error: string; statusCode: number; message: string | string[] };\n\n    if (typeof error === 'string') {\n      response.status(status).json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        message: error,\n        data: null,\n      });\n    } else {\n      response.status(status).json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        message: error.message,\n        data: null,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalUserGuard.html":{"url":"injectables/LocalUserGuard.html","title":"injectable - LocalUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local-user.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(ProviderEnum.LOCAL)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProviderEnum } from '../../user/entities/provider.enum';\n\n@Injectable()\nexport class LocalUserGuard extends AuthGuard(ProviderEnum.LOCAL) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalUserStrategy.html":{"url":"injectables/LocalUserStrategy.html","title":"injectable - LocalUserStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalUserStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/stratges/local-user.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/stratges/local-user.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/stratges/local-user.strategy.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\nimport { User } from '../../user/entities/user.entity';\n\n@Injectable()\nexport class LocalUserStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      // 이메일 가입자 로컬인 경우 email 필드로 확인\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    return await this.authService.findUser({\n      email,\n      password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginUserDto {\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverUserGuard.html":{"url":"injectables/NaverUserGuard.html","title":"injectable - NaverUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/naver-user.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(ProviderEnum.NAVER)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ProviderEnum } from '../../user/entities/provider.enum';\n\n@Injectable()\nexport class NaverUserGuard extends AuthGuard(ProviderEnum.NAVER) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverUserStrategy.html":{"url":"injectables/NaverUserStrategy.html","title":"injectable - NaverUserStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverUserStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/stratges/naver-user.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/stratges/naver-user.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/stratges/naver-user.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-naver';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class NaverUserStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('NAVER_AUTH_CLIENT_ID'),\n      clientSecret: configService.get('NAVER_AUTH_CLIENT_SECRET'),\n      callbackURL: configService.get('NAVER_AUTH_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ): Promise {\n    done(null, profile);\n    const { provider, displayName } = profile;\n    const { email, profile_image } = profile._json;\n    //done(null, profile);\n    try {\n      // 이메일 유무 확인\n      const user = await this.userService.findUserByEmail(email);\n      // 이메일 있으면 provider 체크\n      if (user.provider !== provider) {\n      }\n      // 이메일 저장되있고, provider도 맞으면\n      done(null, user);\n    } catch (err) {\n      // 없는 경우 회원가입 프로세스\n      const newUser = await this.userService.createSocialUser({\n        email,\n        name: displayName,\n        profileImg: profile_image,\n        provider,\n      });\n      done(null, newUser);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordPipe.html":{"url":"injectables/PasswordPipe.html","title":"injectable - PasswordPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswordPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/pipe/password.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/pipe/password.pipe.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class PasswordPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata): any {\n    if (value.toString().length > 8) {\n      throw new BadRequestException('비밀번호는 8자 이하로 입력해주세요!');\n    }\n    return value.toString();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: configService.get('REDIS_TTL'),\n      }),\n      isGlobal: true,\n    }),\n  ],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokenGuard.html":{"url":"injectables/RefreshTokenGuard.html","title":"injectable - RefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/bearer-token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BearerTokenGuard\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/bearer-token.guard.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { UserService } from '../../user/user.service';\n\n@Injectable()\nexport class BearerTokenGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const req = context.switchToHttp().getRequest();\n\n    const rawToken = req.headers['authorization'];\n\n    if (!rawToken) {\n      throw new UnauthorizedException('토큰이 없습니다!');\n    }\n\n    const token = this.authService.extractTokenFromHeader(rawToken, true);\n\n    const result = await this.authService.verifyToken(token);\n\n    /**\n     * request에 넣을 정보\n     *\n     * 1) 사용자 정보 - user\n     * 2) token - token\n     * 3) tokenType - access | refresh\n     * */\n\n    const user = await this.userService.getUserByEmail(result.email);\n    req.user = user;\n    req.token = token;\n    req.tokenType = result.type;\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class AccessTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'access') {\n      throw new UnauthorizedException('Access Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n@Injectable()\nexport class RefreshTokenGuard extends BearerTokenGuard {\n  async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const req = context.switchToHttp().getRequest();\n\n    if (req.tokenType !== 'refresh') {\n      throw new UnauthorizedException('Refresh Token이 아닙니다!');\n    }\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestUser.html":{"url":"interfaces/RequestUser.html","title":"interface - RequestUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/request-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '../../user/entities/user.entity';\n\nexport interface RequestUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayloadInterface.html":{"url":"interfaces/TokenPayloadInterface.html","title":"interface - TokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayloadInterface {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/inceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/inceptors/transform.interceptor.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// export const Info = {\n//   statusCode: 200,\n//   message: 'success',\n// };\n\nexport function createInfo(statusCode: number = 200) {\n  return {\n    statusCode,\n    message: 'success',\n  };\n}\n\nexport type Response = ReturnType & {\n  data: T;\n};\n\n// 성공시 던져주는 msg 형식\n// export type Response = typeof Info & {\n//   data: T;\n// };\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const res = context.switchToHttp().getResponse();\n    const status = res.statusCode;\n    return next\n      .handle()\n      .pipe(map((data) => Object.assign({}, createInfo(status), { data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAuthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateAuthDto } from './create-auth.dto';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                nickname\n                            \n                            \n                                    \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: '유저 닉네임'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: '유저 패스워드'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/update-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto {\n  @ApiProperty({ required: false, description: '유저 패스워드' })\n  password?: string;\n\n  @ApiProperty({ required: false, description: '유저 닉네임' })\n  nickname?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    Public\n                                isVerified\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                nickname\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    \n                                    Public\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProviderEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ProviderEnum, default: undefined})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:84\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity } from '../../common/base.entity';\nimport { BeforeInsert, Column, Entity } from 'typeorm';\nimport { ApiProperty, ApiTags } from '@nestjs/swagger';\nimport { ProviderEnum } from './provider.enum';\nimport * as bcrypt from 'bcryptjs';\nimport * as gravatar from 'gravatar';\nimport { InternalServerErrorException } from '@nestjs/common';\n\n@Entity()\n@ApiTags('UserEntity')\nexport class User extends BaseEntity {\n  // 유저 가입 이메일\n  @Column({\n    unique: true,\n  })\n  @ApiProperty()\n  public email: string;\n\n  // 유저 이름\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public name?: string;\n\n  // 유저 비밀번호\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public password?: string;\n\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public profileImg?: string;\n\n  @BeforeInsert()\n  async processUserCredentials() {\n    try {\n      if (ProviderEnum.LOCAL !== this.provider) {\n        return;\n      }\n      // 이메일 가입자 인 경우 기본 프로필 이미지 저장\n      this.profileImg = gravatar.url(this.email, {\n        s: '200',\n        r: 'pg',\n        d: 'mm',\n        protocol: 'https',\n      });\n    } catch (err) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async hashPassword(newPassword: string): Promise {\n    const saltValue = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(newPassword, saltValue);\n    return this.password;\n  }\n\n  // 유저 닉네임\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public nickname?: string;\n\n  // 유저 휴대폰번호\n  @Column({\n    nullable: true,\n  })\n  @ApiProperty()\n  public phone?: string;\n\n  // 유저 가입경로 [이메일, 구글, 카카오, 네이버]\n  @Column({\n    type: 'enum',\n    enum: ProviderEnum,\n    default: ProviderEnum.LOCAL,\n  })\n  @ApiProperty()\n  public provider: ProviderEnum;\n\n  @Column({\n    default: false,\n  })\n  public isVerified: boolean;\n\n  async checkPassword(inputPassword: string): Promise {\n    try {\n      return await bcrypt.compare(inputPassword, this.password);\n    } catch (err) {\n      console.log(err);\n      throw new InternalServerErrorException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadProfileImg\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestUser, updateUserDto: UpdateUserDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('update/profile/:id')@ApiOperation({summary: '유저 프로필 정보 수정'})@UseGuards(AccessTokenGuard)@UseInterceptors(undefined)@ApiCreatedResponse({description: '유저 프로필 수정'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadProfileImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadProfileImg(req: RequestUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('upload-profileImg')@ApiOperation({summary: '유저 프로필 이미지 업로드'})@UseInterceptors(undefined)@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Req,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { ApiCreatedResponse, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { AccessTokenGuard } from '../auth/guard/bearer-token.guard';\nimport { RequestUser } from '../auth/interface/request-user.interface';\nimport { ConfigService } from '@nestjs/config';\n\n@Controller('user')\n@ApiTags('User')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Post('upload-profileImg')\n  @ApiOperation({\n    summary: '유저 프로필 이미지 업로드',\n  })\n  @UseInterceptors(FileInterceptor('file'))\n  @UseGuards(AccessTokenGuard)\n  async uploadProfileImg(\n    @Req() req: RequestUser,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    const { user } = req;\n\n    const diskPath = file.path.replace(\n      this.configService.get('ATTACH_SAVE_PATH'),\n      '',\n    );\n\n    const imgInfo = {\n      fileName: file.originalname,\n      path: diskPath.replace(/\\\\/gi, '/'),\n      size: file.size,\n    };\n\n    // 프로필 이미지 업데이트\n    await this.userService.updateProfileImg(user.id, imgInfo.path);\n    return imgInfo;\n  }\n\n  // 프로필 업데이트\n  @Post('update/profile/:id')\n  @ApiOperation({\n    summary: '유저 프로필 정보 수정',\n  })\n  @UseGuards(AccessTokenGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiCreatedResponse({ description: '유저 프로필 수정' })\n  async updateProfile(\n    @Req() req: RequestUser,\n    @Body() updateUserDto: UpdateUserDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    const { user } = req;\n\n    const diskPath = file.path.replace(\n      this.configService.get('ATTACH_SAVE_PATH'),\n      '',\n    );\n\n    const imgInfo = {\n      fileName: file.originalname,\n      path: diskPath.replace(/\\\\/gi, '/') ?? user.profileImg,\n      size: file.size,\n    };\n\n    return await this.userService.updateProfile(\n      user.id,\n      updateUserDto.password,\n      updateUserDto.nickname,\n      imgInfo.path,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { format } from 'light-date';\nimport * as fs from 'fs';\nimport { extname } from 'path';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    AuthModule,\n    ConfigModule,\n    MulterModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        storage: diskStorage({\n          destination: function (req, file, cb) {\n            const dest = `${configService.get('ATTACH_SAVE_PATH')}/${format(new Date(), '{yyyy}{MM}/')}`;\n\n            if (!fs.existsSync(dest)) {\n              fs.mkdirSync(dest, {\n                recursive: true,\n              });\n            }\n            cb(null, dest);\n          },\n          filename(req, file, callback) {\n            const randomName = Array(32)\n              .fill(null)\n              .map(() => Math.round(Math.random() * 16).toString(16))\n              .join('');\n            return callback(null, `${randomName}${extname(file.originalname)}`);\n          },\n        }),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                changePasswordByEmail\n                            \n                            \n                                    Async\n                                createSocialUser\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserByNickname\n                            \n                            \n                                    Async\n                                findUserByPhone\n                            \n                            \n                                    Async\n                                findUserForPasswordReset\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                markIsVerify\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                            \n                                    Async\n                                updateProfileImg\n                            \n                            \n                                    Async\n                                validateEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePasswordByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswordByEmail(email: string, confirmPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSocialUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSocialUser(socialUserDto: CreateSocialUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                socialUserDto\n                                            \n                                                            CreateSocialUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByNickname\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByNickname(nickname: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nickname\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByPhone\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserForPasswordReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserForPasswordReset(userInfo: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userInfo\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:151\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markIsVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    markIsVerify(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(id: string, password?: string, nickname?: string, profileImg?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                nickname\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                profileImg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfileImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfileImg(userId: string, profileImg: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profileImg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { ProviderEnum } from './entities/provider.enum';\nimport { CreateSocialUserDto } from './dto/create-social-user.dto';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  // 유저 생성\n  async createUser(createUserDto: CreateUserDto) {\n    // 1) nickname 중복이 없는지 확인\n    // exist() -> 만약에 조건에 해당되는 값이 있으면 true 반환\n    const nicknameExists = await this.userRepository.exists({\n      where: {\n        nickname: createUserDto.nickname,\n      },\n    });\n\n    if (nicknameExists) {\n      throw new BadRequestException('이미 존재하는 닉네임입니다!');\n    }\n\n    const emailExists = await this.userRepository.exists({\n      where: {\n        nickname: createUserDto.email,\n      },\n    });\n\n    if (emailExists) {\n      throw new BadRequestException('이미 존재하는 이메일입니다!');\n    }\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      provider: ProviderEnum.LOCAL,\n    });\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  async createSocialUser(socialUserDto: CreateSocialUserDto) {\n    const newUser = await this.userRepository.create(socialUserDto);\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  // 유저 이메일 유무 확인\n  async validateEmail(email: string) {\n    const existUser = await this.userRepository.findOneBy({ email });\n    if (!existUser) {\n      throw new NotFoundException('해당되는 유저 없습니다.');\n    }\n    return existUser;\n  }\n\n  // 유저 프로필 가져오기 [1명, by userId]\n  async getUser(userId: string) {\n    const existUser = await this.userRepository.findOneBy({\n      id: userId,\n    });\n\n    if (!existUser) {\n      throw new NotFoundException('해당되는 유저정보가 없습니다');\n    }\n\n    return existUser;\n  }\n\n  // 유저 찾기\n  async getUserByEmail(email: string) {\n    return await this.userRepository.findOne({\n      where: {\n        email,\n      },\n    });\n  }\n\n  // 유저 찾기\n  async findUserByEmail(email: string) {\n    const user = await this.userRepository.findOneBy({ email });\n    if (user) return user;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  async findUserByNickname(nickname: string) {\n    const user = await this.userRepository.findOneBy({ nickname });\n    if (user) return user.email;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  async findUserByPhone(phone: string) {\n    const user = await this.userRepository.findOneBy({ phone });\n    if (user) return user.email;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  async findUserForPasswordReset(userInfo: string) {\n    const emailUser = await this.findUserByEmail(userInfo);\n    console.log(emailUser);\n    if (!emailUser) {\n      const phoneUser = await this.findUserByPhone(userInfo);\n      if (!phoneUser) {\n        throw new NotFoundException('등록된 유저가 없습니다!');\n      }\n      return phoneUser;\n    }\n    return emailUser.email;\n  }\n\n  // 비밀번호 변경\n  async changePassword(userId: string, confirmPassword: string) {\n    const user = await this.userRepository.findOneBy({ id: userId });\n\n    const saltValue = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(confirmPassword, saltValue);\n\n    await this.userRepository.update(\n      { id: userId },\n      { password: user.password },\n    );\n    const updateUser = await this.userRepository.findOneBy({ id: userId });\n    return updateUser;\n  }\n\n  async changePasswordByEmail(email: string, confirmPassword: string) {\n    const user = await this.userRepository.findOneBy({ email });\n\n    const saltValue = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(confirmPassword, saltValue);\n\n    await this.userRepository.update({ email }, { password: user.password });\n    const updateUser = await this.userRepository.findOneBy({ email });\n    return updateUser;\n  }\n\n  // 유저 ID로 찾기\n  async getUserById(userId: string) {\n    const user = await this.userRepository.findOneBy({ id: userId });\n    if (user) return user;\n    throw new HttpException('Not found', HttpStatus.NOT_FOUND);\n  }\n\n  // 본인 인증 처리\n  async markIsVerify(email: string) {\n    const user = await this.findUserByEmail(email);\n    if (!user) {\n      throw new NotFoundException('유저를 찾을 수 없습니다!');\n    }\n    return await this.userRepository.update(\n      { email },\n      {\n        isVerified: true,\n      },\n    );\n  }\n\n  // 프로필 이미지 수정\n  async updateProfileImg(userId: string, profileImg: string) {\n    return await this.userRepository.update(\n      {\n        id: userId,\n      },\n      {\n        profileImg,\n      },\n    );\n  }\n\n  // 프로필 비밀번호, 닉네임, 이미지 수정\n  async updateProfile(\n    id: string,\n    password?: string,\n    nickname?: string,\n    profileImg?: string,\n  ) {\n    const user = await this.getUserById(id);\n\n    if (!user) {\n      throw new NotFoundException('유저가 없습니다!');\n    }\n\n    if (password) {\n      user.password = await user.hashPassword(password);\n    }\n\n    if (nickname) {\n      user.nickname = nickname;\n    }\n\n    if (profileImg) {\n      user.profileImg = profileImg;\n    }\n\n    const newUser = await this.userRepository.save(user);\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerifyPayloadInterface.html":{"url":"interfaces/VerifyPayloadInterface.html","title":"interface - VerifyPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerifyPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/verify-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerifyPayloadInterface {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                14 %\n                (3/21)\n            \n        \n        \n            \n                \n                src/auth/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/basic-token.guard.ts\n            \n            guard\n            BasicTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            injectable\n            RefreshTokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/bearer-token.guard.ts\n            \n            guard\n            BearerTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/google-user.guard.ts\n            \n            injectable\n            GoogleUserGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local-user.guard.ts\n            \n            injectable\n            LocalUserGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/naver-user.guard.ts\n            \n            injectable\n            NaverUserGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interface/request-user.interface.ts\n            \n            interface\n            RequestUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interface/token-payload.interface.ts\n            \n            interface\n            TokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interface/verify-payload.interface.ts\n            \n            interface\n            VerifyPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/pipe/password.pipe.ts\n            \n            injectable\n            PasswordPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/stratges/google-user.strategy.ts\n            \n            injectable\n            GoogleUserStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/stratges/local-user.strategy.ts\n            \n            injectable\n            LocalUserStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/stratges/naver-user.strategy.ts\n            \n            injectable\n            NaverUserStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/filter/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/inceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/inceptors/transform.interceptor.ts\n            \n            function\n            createInfo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.documents.ts\n            \n            class\n            BaseAPIDocument\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/create-social-user.dto.ts\n            \n            class\n            CreateSocialUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/17)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/cache-manager : ^2.2.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcryptjs : ^2.4.6\n        \n            @types/cookie-parser : ^1.4.6\n        \n            @types/gravatar : ^1.8.6\n        \n            @types/hapi__joi : ^17.1.14\n        \n            @types/multer : ^1.4.11\n        \n            @types/nodemailer : ^6.4.14\n        \n            @types/passport-google-oauth2 : ^0.1.8\n        \n            @types/passport-jwt : ^4.0.1\n        \n            @types/passport-local : ^1.0.38\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^5.4.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            gravatar : ^1.8.2\n        \n            light-date : ^1.2.0\n        \n            multer : ^1.4.5-lts.1\n        \n            nodemailer : ^6.9.9\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-naver : ^1.0.6\n        \n            pg : ^8.11.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ProviderEnum   (src/.../provider.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/entities/provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProviderEnum\n                    \n                \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 NAVER\n                            \n                        \n                        \n                            \n                                Value : naver\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createInfo   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/inceptors/transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createInfo\n                        \n                    \n                \n            \n            \n                \ncreateInfo(statusCode: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    200\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\nAuthModule -->\n\nRedisModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleUserStrategy\n\nGoogleUserStrategy\n\nAuthModule -->\n\nGoogleUserStrategy->AuthModule\n\n\n\n\n\nLocalUserStrategy\n\nLocalUserStrategy\n\nAuthModule -->\n\nLocalUserStrategy->AuthModule\n\n\n\n\n\nNaverUserStrategy\n\nNaverUserStrategy\n\nAuthModule -->\n\nNaverUserStrategy->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Response   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/inceptors/transform.interceptor.ts\n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
